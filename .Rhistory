tds.rand.zinb1 <- glmmTMB(round(tds_mph,0) ~
tchiyr.std * mated.tri.std +
hsz.std + chisx.std + nsk.std +
offset(segment_dur) +
(1|aclew_child_id),
data=quantity.rand,
ziformula=~nsk.std, # no cvgnce w/ hsz.std added to ZI
family="nbinom1")
summary(tds.rand.zinb1)
library(papaja)
library(ggplot2)
library(tidyverse)
library(viridis)
library(grid)
library(gridExtra)
library(ggpirate)
library(lme4)
library(glmmTMB)
source("0-Helper.R")
data.path <- "transcripts/anon/" # text files exported from ELAN
plot.path <- "plots/" # output plots
seg.index.file <- "Segment-order-inventory.csv"
ptcp.info.file <- "recording-info.csv"
comparison.file <- "comparison_studies.csv"
samplelabels <- c("High activity  ", "Random  ")
col.sample.bu <- list(
scale_fill_manual(labels=samplelabels, values=viridis(2)),
scale_color_manual(labels=samplelabels, values=viridis(2)))
col.sample.bu3 <- list(
scale_fill_manual(labels=samplelabels, values=viridis(3)),
scale_color_manual(labels=samplelabels, values=viridis(3)))
allowed.overlap <- 1000 #ms
allowed.gap <- 2000 #ms
sem <- function (x) {
sd(x) / sqrt(length(x))
}
# Read in annotation files
files <- list.files(path=data.path,pattern="*.txt")
all.data <- data.frame()
for (i in 1:length(files)) {
#  print(files[i])
newfile <- read_csv(paste0(data.path, files[i]), col_types = cols(val = col_character()))
newfile$aclew_child_id <- unlist(strsplit(files[i], '\\.'))[1]
all.data <- rbind(all.data, newfile)
}
all.data$row <- c(1:nrow(all.data))
# Read in supplementary data
ptcp.info <- read_csv(ptcp.info.file, col_types = cols()) %>%
dplyr::select(-row)
seg.info <- read_csv(seg.index.file)
# Create normalized versions of predictor vars
ptcp.info <- ptcp.info %>%
mutate(
tchiyr.m = mean(age_mo_round),
motyr.m = mean(mother_age),
nsb.m = mean(number_older_sibs),
hsz.m = mean(household_size),
tchiyr.sd = sd(age_mo_round),
motyr.sd = sd(mother_age),
nsb.sd = sd(number_older_sibs),
hsz.sd = sd(household_size)
)
# Add participant and segment info
codes <- all.data %>% filter(tier == "code")
all.data <- all.data %>%
filter(speaker != "") %>%
left_join(ptcp.info, by = "aclew_child_id") %>%
mutate(segment = "", sample = "",
sample_type = "", segment_dur = 0)
for (i in 1:nrow(codes)) {
rec <- codes$aclew_child_id[i]
seg <- as.character(codes$val[i])
seg.on <- codes$start[i]
seg.off <- codes$stop[i]
seg.idx <- which(all.data$aclew_child_id == rec &
all.data$start < seg.off &
all.data$stop > seg.on)
all.data$segment[seg.idx] <- seg
}
# Label samples
all.data$sample[which(
grepl('^random', all.data$segment))] <- "random"
all.data$sample[which(
grepl('tt', all.data$segment))] <- "turn-taking"
all.data$sample[which(
grepl('va', all.data$segment))] <- "high-activity"
# Label sample types and durations
random.samples <- which(grepl('^random', all.data$segment))
all.data$sample_type[random.samples] <- "random"
all.data$segment_dur[random.samples] <- 5
ext.samples <- which(grepl('^extension', all.data$segment))
all.data$sample_type[ext.samples] <- "extension"
all.data$segment_dur[ext.samples] <- 5
tt.samples <- which(grepl('^tt', all.data$segment))
all.data$sample_type[tt.samples] <- "turn-taking"
all.data$segment_dur[tt.samples] <- 1
va.samples <- which(grepl('^va', all.data$segment))
all.data$sample_type[va.samples] <- "turn-taking"
all.data$segment_dur[va.samples] <- 1
avg.utt.len.tseltal <- all.data %>%
filter(speaker != "CHI") %>%
dplyr::select(dur) %>%
summarise(mean.utt.len = mean(dur),
median.utt.len = median(dur))
# Get min/hr speech measures
n.unique.rand.segs <- length(unique(all.data$segment[grepl("random", all.data$segment)]))
n.unique.recs <- length(unique(all.data$aclew_child_id))
all.rand.segments <- tibble(
aclew_child_id = rep(unique(all.data$aclew_child_id),
n.unique.rand.segs),
segment = rep(unique(all.data$segment[grepl("random", all.data$segment)]),
n.unique.recs))
# XDS
xds.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier)) %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(xds_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, xds_min = 0)) %>%
mutate(xds_mph = (xds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# ODS
ods.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & val != "T") %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(ods_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, ods_min = 0)) %>%
mutate(ods_mph = (ods_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# TDS
tds.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & val == "T") %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(tds_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, tds_min = 0)) %>%
mutate(tds_mph = (tds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# All CDS
cds.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(cds_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, cds_min = 0)) %>%
mutate(cds_mph = (cds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# Number of speakers per clip
spkrs.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.rand <- xds.per.seg.rand %>%
full_join(ods.per.seg.rand, by = c("aclew_child_id", "segment", "segment_dur")) %>%
full_join(tds.per.seg.rand, by = c("aclew_child_id", "segment", "segment_dur")) %>%
full_join(cds.per.seg.rand, by = c("aclew_child_id", "segment", "segment_dur")) %>%
full_join(spkrs.per.seg.rand, by = c("aclew_child_id", "segment")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
replace_na(list(xds_min = 0, xds_mph = 0,
tds_min = 0, tds_mph = 0,
cds_min = 0, cds_mph = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds = tds_min/xds_min)
# Don't replace NAs with 0s in this case; proportion is not meaningful w/o any speech
quantity.rand.bychild <- quantity.rand %>%
group_by(aclew_child_id) %>%
summarise(
xds_min = mean(xds_min),
xds_mph = mean(xds_mph),
ods_min = mean(ods_min),
ods_mph = mean(ods_mph),
tds_min = mean(tds_min),
tds_mph = mean(tds_mph),
cds_min = mean(cds_min),
cds_mph = mean(cds_mph),
prop_tds = mean(prop_tds, na.rm = TRUE),
m_n_spkrs = mean(n_spkrs_clip)) %>%
full_join(ptcp.info, by = "aclew_child_id")
# Get xds and tds min/hr by speaker type
all.data$SpkrAge <- "Not known"
all.data$SpkrAge[grepl("FA|MA|UA", all.data$speaker)] <- "Adult"
all.data$SpkrAge[grepl("FC|MC|UC", all.data$speaker)] <- "Child"
all.rand.segments.sa <- tibble(
aclew_child_id = rep(unique(all.data$aclew_child_id),
2*n.unique.rand.segs),
segment = rep(unique(all.data$segment[grepl("random", all.data$segment)]),
2*n.unique.recs),
SpkrAge = c(rep("Adult", (n.unique.rand.segs * n.unique.recs)),
rep("Child", (n.unique.rand.segs * n.unique.recs))))
# XDS
xds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier)) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(xds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, xds_min.sa = 0)) %>%
mutate(xds_mph.sa = (xds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# ODS
ods.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & val != "T") %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(ods_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, ods_min.sa = 0)) %>%
mutate(ods_mph.sa = (ods_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# TDS
tds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & val == "T") %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(tds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, tds_min.sa = 0)) %>%
mutate(tds_mph.sa = (tds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# All CDS
cds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(cds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, cds_min.sa = 0)) %>%
mutate(cds_mph.sa = (cds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# Number of speakers per clip
spkrs.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, SpkrAge, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.rand.sa <- xds.per.seg.rand.sa %>%
full_join(ods.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(tds.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(cds.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(dplyr::select(quantity.rand, c("aclew_child_id", "segment", "tds_min")),
by = c("aclew_child_id", "segment")) %>%
full_join(spkrs.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge", "segment")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
replace_na(list(xds_min.sa = 0, xds_mph.sa = 0,
ods_min.sa = 0, ods_mph.sa = 0,
tds_min.sa = 0, tds_mph.sa = 0,
cds_min.sa = 0, cds_mph.sa = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds.sa = tds_min.sa/xds_min.sa,
prop_sa.tds = tds_min.sa/tds_min)
comparison.data <- read_csv(comparison.file)
tds.mph.tofill <- which(is.na(comparison.data$tds_mph) & !(is.na(comparison.data$tds_uph)))
comparison.data$tds_mph[tds.mph.tofill] <- ((comparison.data$tds_uph[tds.mph.tofill] *
avg.utt.len.tseltal$median.utt.len)/60000)
ods.mph.tofill <- which(is.na(comparison.data$ods_mph) & !(is.na(comparison.data$ods_uph)))
comparison.data$ods_mph[ods.mph.tofill] <- ((comparison.data$ods_uph[ods.mph.tofill] *
avg.utt.len.tseltal$median.utt.len)/60000)
xds.mph.tofill <- which(is.na(comparison.data$xds_mph) &
!(is.na(comparison.data$ods_mph)) & !(is.na(comparison.data$tds_mph)))
comparison.data$xds_mph[xds.mph.tofill] <- comparison.data$ods_mph[xds.mph.tofill] +
comparison.data$tds_mph[xds.mph.tofill]
comparison.data.sa <- bind_rows(comparison.data, comparison.data)
comparison.data.sa$SpkrAge <- c(rep("Child", nrow(comparison.data)),
rep("Adult", nrow(comparison.data)))
comparison.data.sa$prp_spkr <- NA
for (i in 1:nrow(comparison.data.sa)) {
if (!(is.na(comparison.data.sa$prp_tds_adu[i]))) {
comparison.data.sa$prp_spkr[i] <- ifelse(comparison.data.sa$SpkrAge[i] == "Child",
comparison.data.sa$prp_tds_chi[i]/100,
comparison.data.sa$prp_tds_adu[i]/100)
}
}
comparison.data$Site <- factor(comparison.data$Site, levels = unique(comparison.data$Site))
comparison.data.sa$Site <- factor(comparison.data.sa$Site, levels = unique(comparison.data$Site))
comparison.data.shapes <- unique(comparison.data$shape)
# Graph the basic speech quantity info
# XDS min/hr
xdsmph.segments.rand <- ggplot(quantity.rand,
aes(x = age_mo_round, y = xds_mph)) +
geom_boxplot(aes(group = age_mo_round), outlier.shape = NA) +
geom_smooth(method = "lm", color = "black") +
ylab("XDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,85),
breaks=seq(0,85,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,85),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = xds_mph, group = Site, shape = Site), alpha = 0.4) +
scale_shape_manual(values=comparison.data.shapes) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# ODS min/hr
odsmph.segments.rand <- ggplot(quantity.rand,
aes(x = age_mo_round, y = ods_mph)) +
geom_boxplot(aes(group = age_mo_round), outlier.shape = NA) +
geom_smooth(method = "lm", color = "black") +
ylab("ODS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,80),
breaks=seq(0,80,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,80),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = ods_mph, group = Site, shape = Site), alpha = 0.4) +
scale_shape_manual(values=comparison.data.shapes) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# TDS min/hr
tdsmph.segments.rand <- ggplot(quantity.rand,
aes(x = age_mo_round, y = tds_mph)) +
geom_boxplot(aes(group = age_mo_round), outlier.shape = NA) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS (min/hr)") + xlab("")	+
scale_y_continuous(limits=c(0,80),
breaks=seq(0,80,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,80),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = tds_mph, group = Site, shape = Site), alpha = 0.4) +
scale_shape_manual(values=comparison.data.shapes) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
tdsmph.segments.rand.zoomedin <- ggplot(quantity.rand,
aes(x = age_mo_round, y = tds_mph)) +
geom_boxplot(aes(group = age_mo_round), outlier.shape = NA) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,20),
breaks=seq(0,20,5)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,20),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = tds_mph, group = Site, shape = Site), alpha = 0.4) +
scale_shape_manual(values=comparison.data.shapes) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# TDS prop
tdsprp.segments.rand <- ggplot(quantity.rand,
aes(x = age_mo_round, y = prop_tds)) +
geom_boxplot(aes(group = age_mo_round), outlier.shape = NA) +
geom_smooth(method = "lm", color = "black") +
ylab("TCDS/All spch") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1),xlim=c(0,38)) +
geom_point(data = comparison.data,
aes(x = AgeMonths, y = prp_tds, group = Site, shape = Site), alpha = 0.4) +
scale_shape_manual(values=comparison.data.shapes) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# prop TDS from adults vs. children
tdsprp.segments.sa.rand <- ggplot(quantity.rand.sa,
aes(x = age_mo_round, y = prop_sa.tds,
group = SpkrAge, fill = SpkrAge, color = SpkrAge)) +
geom_boxplot(aes(group = interaction(age_mo_round, SpkrAge),
fill = SpkrAge, color = SpkrAge),
position = position_dodge(1), outlier.shape = NA, alpha = 0.3) +
geom_smooth(method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
geom_point(data = comparison.data.sa,
aes(x = AgeMonths, y = prp_spkr, group = SpkrAge,
fill = SpkrAge, shape = Site), alpha = 0.5) +
scale_shape_manual(values=comparison.data.shapes) +
col.sample.bu3 +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
quantity.rand$child_sex <- as.factor(quantity.rand$child_sex)
quantity.rand$mat_ed <- as.factor(quantity.rand$mat_ed)
nspkrs.m <- mean(quantity.rand$n_spkrs_clip)
nspkrs.sd <- sd(quantity.rand$n_spkrs_clip)
quantity.rand <- quantity.rand %>%
mutate(
xds_mph.nz = ifelse(xds_mph > 0, 1, 0),
ods_mph.nz = ifelse(ods_mph > 0, 1, 0),
tds_mph.nz = ifelse(tds_mph > 0, 1, 0),
cds_mph.nz = ifelse(cds_mph > 0, 1, 0),
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.tri.std = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6-8", "preparatory" = "12+"),
mated.tri.std2 = recode_factor(mat_ed,
"preparatory" = "12+",
"none" = "0-5", "primary" = "0-5",
"secondary" = "6-8"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd))
ods.rand.hurdle.zr <- glmer(ods_mph.nz ~ nsk.std +
(1|aclew_child_id),
data = quantity.rand,
family = binomial(link = logit))
ods.rand.hurdle.nz <- glmer(ods_mph ~ tchiyr.std * mated.tri.std +
nsk.std + hsz.std + chisx.std +
(1|aclew_child_id),
data = subset(quantity.rand, ods_mph.nz == 1),
family = Gamma(link = log))
ods.rand.zinb1 <- glmmTMB(round(ods_mph,0) ~ # ODS rand winner
tchiyr.std * mated.tri.std +
hsz.std + chisx.std + nsk.std +
offset(segment_dur) +
(1|aclew_child_id),
data=quantity.rand,
ziformula=~nsk.std, # no cvgnce w/ hsz.std added to ZI
family="nbinom1")
summary(ods.rand.zinb1)
ods.rand.zinb1b <- glmmTMB(round(ods_mph,0) ~ # ODS rand winner
tchiyr.std * mated.tri.std2 +
hsz.std + chisx.std + nsk.std +
offset(segment_dur) +
(1|aclew_child_id),
data=quantity.rand,
ziformula=~nsk.std, # no cvgnce w/ hsz.std added to ZI
family="nbinom1")
summary(ods.rand.zinb1)
tds.rand.hurdle.zr <- glmer(tds_mph.nz ~ nsk.std +
(1|aclew_child_id),
data = quantity.rand,
family = binomial(link = logit))
tds.rand.hurdle.nz <- glmer(tds_mph ~ tchiyr.std * mated.tri.std +
nsk.std + hsz.std + chisx.std +
(1|aclew_child_id),
data = subset(quantity.rand, tds_mph.nz == 1),
family = Gamma(link = log))
tds.rand.zinb1 <- glmmTMB(round(tds_mph,0) ~
tchiyr.std * mated.tri.std +
hsz.std + chisx.std + nsk.std +
offset(segment_dur) +
(1|aclew_child_id),
data=quantity.rand,
ziformula=~nsk.std, # no cvgnce w/ hsz.std added to ZI
family="nbinom1")
summary(tds.rand.zinb1)
quantity.rand.prpdata <- subset(quantity.rand, !(is.na(prop_tds)))
# Requires that 0 < y < 1: so we transform (y * (n−1) + 0.5) / n where n = sample size
quantity.rand.prpdata$prp_tds_sqz <- (quantity.rand.prpdata$prop_tds * (nrow(quantity.rand.prpdata)-1) + 0.5)/nrow(quantity.rand.prpdata)
prptds.rand.beta1 <- glmmTMB(prp_tds_sqz ~
tchiyr.std * mated.std +
hsz.std + chisx.std + nsk.std +
(1|aclew_child_id),
data=quantity.rand.prpdata,
family=list(family="beta",link="logit"))
summary(prptds.rand.beta1)
summary(tds.rand.zinb1)
summary(prptds.rand.beta1)
prptds.rand.beta1 <- glmmTMB(prp_tds_sqz ~
tchiyr.std * mated.tri.std +
hsz.std + chisx.std + nsk.std +
(1|aclew_child_id),
data=quantity.rand.prpdata,
family=list(family="beta",link="logit"))
summary(prptds.rand.beta1)
prptds.rand.beta1 <- glmmTMB(prp_tds_sqz ~
tchiyr.std +
hsz.std + chisx.std + nsk.std +
(1|aclew_child_id),
data=quantity.rand.prpdata,
family=list(family="beta",link="logit"))
summary(prptds.rand.beta1)
prptds.rand.beta1 <- glmmTMB(prp_tds_sqz ~
tchiyr.std + mated.tri.std +
hsz.std + chisx.std + nsk.std +
(1|aclew_child_id),
data=quantity.rand.prpdata,
family=list(family="beta",link="logit"))
summary(prptds.rand.beta1)
prptds.rand.beta1 <- glmmTMB(prp_tds_sqz ~
tchiyr.std * mated.tri.std +
hsz.std + chisx.std + nsk.std +
(1|aclew_child_id),
data=quantity.rand.prpdata,
family=list(family="beta",link="logit"))
summary(prptds.rand.beta1)
prptds.rand.beta1b <- glmmTMB(prp_tds_sqz ~
tchiyr.std * mated.tri.std2 +
hsz.std + chisx.std + nsk.std +
(1|aclew_child_id),
data=quantity.rand.prpdata,
family=list(family="beta",link="logit"))
summary(prptds.rand.beta1b)
