subdata <- all.data %>%
filter(aclew_child_id == all.segments$aclew_child_id[i] &
segment == all.segments$segment[i])
c_utt <- subdata %>%
filter(tier == "CHI")
used.tm1s <- c()
used.tp1s <- c()
child <- all.segments$aclew_child_id[i]
child
c_utt
c_utt %>%
select(aclew_child_id, segment, tier, speaker, start, stop)
chi.turn.info <- c_utt %>%
select(aclew_child_id, segment, tier, speaker, start, stop) %>%
mutate(tm1.tier = NA, tm1.speaker = NA, tm1.start = NA, tm1.stop = NA, tm1.val = NA,
tp1.tier = NA, tp1.speaker = NA, tp1.start = NA, tp1.stop = NA, tp1.val = NA)
j <- 1
(c_utt$stop[j] - allowed.overlap)
c_utt$start[j]
tp1.start <- max((c_utt$stop[j] - allowed.overlap), c_utt$start[j])
tp1.stop <- c_utt$stop[j] + allowed.gap
tp1.start
tp1.stop
c_utt$start[j]
allowed.gap
tp1.stop
11191850-11189583
c_utt$dur[j]
tp1.start <- max((c_utt$stop[j] - allowed.overlap), c_utt$start[j])
tp1.stop <- c_utt$stop[j] + allowed.gap
t.plus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T") &
subdata$start >= tp1.start &
subdata$start <= tp1.stop)
t.plus1
tm1.start <- c_utt$start[j] - allowed.gap
tm1.stop <- min((c_utt$start[j] + allowed.overlap), c_utt$stop[j])
t.minus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T"|subdata$val == "C") &
subdata$stop <= tm1.stop &
subdata$stop >= tm1.start)
t.minus1
length(t.plus1) > 0
tp1.match <- 0
t.plus1
turn <- t.plus1[1]
used.tp1s
!(turn %in% used.tp1s)
tp1.match == 0
used.tp1s <- c(used.tp1s, turn)
used.tp1s
chi.turn.info
ncol(turn.transitions)
ncol(chi.turn.info)
all.segments <- all.rand.segments %>%
mutate(sample = "random", sample_type = "random") %>%
bind_rows(all.nonrand.segments) %>%
arrange(aclew_child_id, segment)
turn.transitions <- tibble(
aclew_child_id = NA,
segment = NA,
tier = NA,
speaker = NA,
start = NA,
stop = NA,
tm1.tier = NA,
tm1.speaker = NA,
tm1.start = NA,
tm1.stop = NA,
tm1.val = NA,
tp1.tier = NA,
tp1.speaker = NA,
tp1.start = NA,
tp1.stop = NA,
tp1.val = NA
)
for (i in 1:nrow(all.segments)) {
subdata <- all.data %>%
filter(aclew_child_id == all.segments$aclew_child_id[i] &
segment == all.segments$segment[i])
c_utt <- subdata %>%
filter(tier == "CHI")
used.tm1s <- c()
used.tp1s <- c()
child <- all.segments$aclew_child_id[i]
# Save turn-by-turn info
chi.turn.info <- c_utt %>%
select(aclew_child_id, segment, tier, speaker, start, stop) %>%
mutate(tm1.tier = NA, tm1.speaker = NA, tm1.start = NA, tm1.stop = NA, tm1.val = NA,
tp1.tier = NA, tp1.speaker = NA, tp1.start = NA, tp1.stop = NA, tp1.val = NA)
for (j in 1:nrow(c_utt)) {
# Find CHI-OTH transitions
# "T" responses that start:
#    - earliest: when the child starts vocalizing, with a limit on vocal overlap
#    - latest: before the maximum allowed gap after the child's voc ends
tp1.start <- max((c_utt$stop[j] - allowed.overlap), c_utt$start[j])
tp1.stop <- c_utt$stop[j] + allowed.gap
t.plus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T") &
subdata$start >= tp1.start &
subdata$start <= tp1.stop)
# Find OTH-CHI transitions
# "T" prompts that start:
#    - earliest: within the maximum gap allowed before the child begins vocalizing
#    - latest: when the child stops vocalizing, with a limit on vocal overlap
tm1.start <- c_utt$start[j] - allowed.gap
tm1.stop <- min((c_utt$start[j] + allowed.overlap), c_utt$stop[j])
t.minus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T"|subdata$val == "C") &
subdata$stop <= tm1.stop &
subdata$stop >= tm1.start)
if(length(t.plus1) > 0) {
tp1.match <- 0
for (turn in t.plus1) {
# Each OTH turn can only be a response once
if (!(turn %in% used.tp1s) & tp1.match == 0) {
used.tp1s <- c(used.tp1s, turn)
chi.turn.info$tp1.tier[j] <- subdata$tier[turn]
chi.turn.info$tp1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tp1.start[j] <- subdata$start[turn]
chi.turn.info$tp1.stop[j] <- subdata$stop[turn]
chi.turn.info$tp1.val[j] <- subdata$val[turn]
tp1.match <- 1
}
}
}
if(length(t.minus1) > 0) {
tm1.match <- 0
for (turn in t.minus1) {
# Each OTH turn can only be a prompt once
if (!(turn %in% used.tm1s) & tm1.match == 0) {
used.tm1s <- c(used.tm1s, turn)
chi.turn.info$tm1.tier[j] <- subdata$tier[turn]
chi.turn.info$tm1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tm1.start[j] <- subdata$start[turn]
chi.turn.info$tm1.stop[j] <- subdata$stop[turn]
chi.turn.info$tm1.val[j] <- subdata$val[turn]
tm1.match <- 1
}
}
}
}
turn.transitions <- bind_rows(turn.transitions, chi.turn.info)
}
View(turn.transitions)
all.segments <- all.rand.segments %>%
mutate(sample = "random", sample_type = "random") %>%
bind_rows(all.nonrand.segments) %>%
arrange(aclew_child_id, segment)
turn.transitions <- tibble()
for (i in 1:nrow(all.segments)) {
subdata <- all.data %>%
filter(aclew_child_id == all.segments$aclew_child_id[i] &
segment == all.segments$segment[i])
c_utt <- subdata %>%
filter(tier == "CHI")
used.tm1s <- c()
used.tp1s <- c()
child <- all.segments$aclew_child_id[i]
# Save turn-by-turn info
chi.turn.info <- c_utt %>%
select(aclew_child_id, segment, tier, speaker, start, stop) %>%
mutate(tm1.tier = NA, tm1.speaker = NA, tm1.start = NA, tm1.stop = NA, tm1.val = NA,
tp1.tier = NA, tp1.speaker = NA, tp1.start = NA, tp1.stop = NA, tp1.val = NA)
for (j in 1:nrow(c_utt)) {
# Find CHI-OTH transitions
# "T" responses that start:
#    - earliest: when the child starts vocalizing, with a limit on vocal overlap
#    - latest: before the maximum allowed gap after the child's voc ends
tp1.start <- max((c_utt$stop[j] - allowed.overlap), c_utt$start[j])
tp1.stop <- c_utt$stop[j] + allowed.gap
t.plus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T") &
subdata$start >= tp1.start &
subdata$start <= tp1.stop)
# Find OTH-CHI transitions
# "T" prompts that start:
#    - earliest: within the maximum gap allowed before the child begins vocalizing
#    - latest: when the child stops vocalizing, with a limit on vocal overlap
tm1.start <- c_utt$start[j] - allowed.gap
tm1.stop <- min((c_utt$start[j] + allowed.overlap), c_utt$stop[j])
t.minus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T"|subdata$val == "C") &
subdata$stop <= tm1.stop &
subdata$stop >= tm1.start)
if(length(t.plus1) > 0) {
tp1.match <- 0
for (turn in t.plus1) {
# Each OTH turn can only be a response once
if (!(turn %in% used.tp1s) & tp1.match == 0) {
used.tp1s <- c(used.tp1s, turn)
chi.turn.info$tp1.tier[j] <- subdata$tier[turn]
chi.turn.info$tp1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tp1.start[j] <- subdata$start[turn]
chi.turn.info$tp1.stop[j] <- subdata$stop[turn]
chi.turn.info$tp1.val[j] <- subdata$val[turn]
tp1.match <- 1
}
}
}
if(length(t.minus1) > 0) {
tm1.match <- 0
for (turn in t.minus1) {
# Each OTH turn can only be a prompt once
if (!(turn %in% used.tm1s) & tm1.match == 0) {
used.tm1s <- c(used.tm1s, turn)
chi.turn.info$tm1.tier[j] <- subdata$tier[turn]
chi.turn.info$tm1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tm1.start[j] <- subdata$start[turn]
chi.turn.info$tm1.stop[j] <- subdata$stop[turn]
chi.turn.info$tm1.val[j] <- subdata$val[turn]
tm1.match <- 1
}
}
}
}
turn.transitions <- bind_rows(turn.transitions, chi.turn.info)
}
which(is.na(turn.transitions$tier))
turn.transitions.overview.o_c <- turn.transitions %>%
group_by(aclew_child_id, segment, tm1.val) %>%
summarise(n.o_c.tts = n()) %>%
rename(oth.spkr = tm1.val) %>%
replace_na(list(oth.spkr = "O"))
View(turn.transitions.overview.o_c)
all.segments <- all.rand.segments %>%
mutate(sample = "random", sample_type = "random") %>%
bind_rows(all.nonrand.segments) %>%
arrange(aclew_child_id, segment)
turn.transitions <- tibble()
for (i in 1:nrow(all.segments)) {
subdata <- all.data %>%
filter(aclew_child_id == all.segments$aclew_child_id[i] &
segment == all.segments$segment[i])
c_utt <- subdata %>%
filter(tier == "CHI")
used.tm1s <- c()
used.tp1s <- c()
child <- all.segments$aclew_child_id[i]
# Save turn-by-turn info
chi.turn.info <- c_utt %>%
select(aclew_child_id, segment, tier, speaker, start, stop) %>%
mutate(tm1.tier = NA, tm1.speaker = NA, tm1.start = NA, tm1.stop = NA, tm1.val = NA,
tp1.tier = NA, tp1.speaker = NA, tp1.start = NA, tp1.stop = NA, tp1.val = NA)
for (j in 1:nrow(c_utt)) {
# Find CHI-OTH transitions
# "T" responses that start:
#    - earliest: when the child starts vocalizing, with a limit on vocal overlap
#    - latest: before the maximum allowed gap after the child's voc ends
tp1.start <- max((c_utt$stop[j] - allowed.overlap), c_utt$start[j])
tp1.stop <- c_utt$stop[j] + allowed.gap
t.plus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T") &
subdata$start >= tp1.start &
subdata$start <= tp1.stop)
# Find OTH-CHI transitions
# "T" prompts that start:
#    - earliest: within the maximum gap allowed before the child begins vocalizing
#    - latest: when the child stops vocalizing, with a limit on vocal overlap
tm1.start <- c_utt$start[j] - allowed.gap
tm1.stop <- min((c_utt$start[j] + allowed.overlap), c_utt$stop[j])
t.minus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T") &
subdata$stop <= tm1.stop &
subdata$stop >= tm1.start)
if(length(t.plus1) > 0) {
tp1.match <- 0
for (turn in t.plus1) {
# Each OTH turn can only be a response once
if (!(turn %in% used.tp1s) & tp1.match == 0) {
used.tp1s <- c(used.tp1s, turn)
chi.turn.info$tp1.tier[j] <- subdata$tier[turn]
chi.turn.info$tp1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tp1.start[j] <- subdata$start[turn]
chi.turn.info$tp1.stop[j] <- subdata$stop[turn]
chi.turn.info$tp1.val[j] <- subdata$val[turn]
tp1.match <- 1
}
}
}
if(length(t.minus1) > 0) {
tm1.match <- 0
for (turn in t.minus1) {
# Each OTH turn can only be a prompt once
if (!(turn %in% used.tm1s) & tm1.match == 0) {
used.tm1s <- c(used.tm1s, turn)
chi.turn.info$tm1.tier[j] <- subdata$tier[turn]
chi.turn.info$tm1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tm1.start[j] <- subdata$start[turn]
chi.turn.info$tm1.stop[j] <- subdata$stop[turn]
chi.turn.info$tm1.val[j] <- subdata$val[turn]
tm1.match <- 1
}
}
}
}
turn.transitions <- bind_rows(turn.transitions, chi.turn.info)
}
turn.transitions.overview.o_c <- turn.transitions %>%
group_by(aclew_child_id, segment, tm1.val) %>%
summarise(n.o_c.tts = n()) %>%
rename(oth.spkr = tm1.val) %>%
replace_na(list(oth.spkr = "O"))
View(subset(turn.transitions, aclew_child_id == "0643" & segment == "random-3"))
View(subset(all.data, aclew_child_id == "0643" & segment == "random-3", speaker == "CHI"))
nrow(subset(all.data, aclew_child_id == "0643" & segment == "random-3", speaker == "CHI"))
nrow(subset(all.data, aclew_child_id == "0643" & segment == "random-3", speaker == "CHI" & speaker == tier))
View(subset(all.data, aclew_child_id == "0643" & segment == "random-3", speaker == "CHI" & speaker == tier))
test <- (subset(all.data, aclew_child_id == "0643" & segment == "random-3", speaker == "CHI" & speaker == tier))
write_csv(test, "test.cs")
test <- (subset(all.data, aclew_child_id == "0643" & segment == "random-3", speaker == "CHI"))
write_csv(test, "test.csv")
test <- all.data %>%
filter(aclew_child_id == "0643" &
segment == "random-3")
write_csv(test, "test.csv")
test <- all.data %>%
filter(aclew_child_id == "0643" &
segment == "random-3" & speaker == "CHI")
write_csv(test, "test.csv")
distinct(turn.transitions, tm1.val)
distinct(turn.transitions, tp1.val)
test <- turn.transitions %>%
filter(!(is.na(tm1.val)))
nrow(test)
nrow(turn.transitions)
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n())
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n())
turn.transitions.overview.c_o <- turn.transitions %>%
filter(!(is.na(tp1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.c_o.tts = n())
View(all.segments)
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment"))
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(n.o_c.tts = 0) %>%
arrange(aclew_child_id, segment)
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n.o_c.tts = 0)) %>%
arrange(aclew_child_id, segment)
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n.o_c.tts = 0)) %>%
arrange(aclew_child_id, segment)
turn.transitions.overview.c_o <- turn.transitions %>%
filter(!(is.na(tp1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.c_o.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n.c_o.tts = 0)) %>%
arrange(aclew_child_id, segment)
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n.o_c.tts = 0)) %>%
arrange(aclew_child_id, segment) %>%
mutate(duration = ifelse(grepl('extension', sample_type), 5,
ifelse(grepl('random', sample_type), 5, 1)))
turn.transitions.overview.o_c <- turn.transitions %>%
filter(!(is.na(tm1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.o_c.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n.o_c.tts = 0)) %>%
arrange(aclew_child_id, segment) %>%
mutate(duration = ifelse(grepl('extension', sample_type), 5,
ifelse(grepl('random', sample_type), 5, 1)))
turn.transitions.overview.c_o <- turn.transitions %>%
filter(!(is.na(tp1.val))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n.c_o.tts = n()) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n.c_o.tts = 0)) %>%
arrange(aclew_child_id, segment) %>%
mutate(duration = ifelse(grepl('extension', sample_type), 5,
ifelse(grepl('random', sample_type), 5, 1)))
nrow(turn.transitions.overview.c_o)
nrow(turn.transitions.overview.o_c)
which(!(names(turn.transitions.overview.c_o) %in% names(turn.transitions.overview.o_c)))
names(turn.transitions.overview.c_o)[3]
names(turn.transitions.overview.c_o)
dplyr::select(turn.transitions.overview.c_o, c("aclew_child_id", "segment"))
turn.transitions.overview <- turn.transitions.overview.o_c %>%
full_join(dplyr::select(turn.transitions.overview.c_o, c("aclew_child_id", "segment")),
by = c("aclew_child_id", "segment"))
View(turn.transitions.overview)
turn.transitions.overview <- turn.transitions.overview.o_c %>%
full_join(dplyr::select(turn.transitions.overview.c_o,
c("aclew_child_id", "segment", "n.c_o.tts")),
by = c("aclew_child_id", "segment"))
turn.transitions.overview <- turn.transitions.overview.o_c %>%
full_join(dplyr::select(turn.transitions.overview.c_o,
c("aclew_child_id", "segment", "n.c_o.tts")),
by = c("aclew_child_id", "segment")) %>%
mutate(n.o_c.tph = n.o_c.tts/duration,
n.c_o.tph = n.c_o.tts/duration)
28/5
turn.transitions.overview <- turn.transitions.overview.o_c %>%
full_join(dplyr::select(turn.transitions.overview.c_o,
c("aclew_child_id", "segment", "n.c_o.tts")),
by = c("aclew_child_id", "segment")) %>%
mutate(n.o_c.tph = (n.o_c.tts/duration)*60,
n.c_o.tph = (n.c_o.tts/duration)*60)
turn.transitions.overview <- turn.transitions.overview.o_c %>%
full_join(dplyr::select(turn.transitions.overview.c_o,
c("aclew_child_id", "segment", "n.c_o.tts")),
by = c("aclew_child_id", "segment")) %>%
mutate(n.o_c.tpm = n.o_c.tts*60,
n.c_o.tpm = n.c_o.tts*60)
turn.taking.by.child.by.seg <- turn.transitions.overview %>%
group_by(sample_type) %>%
mutate(mean.n.o_c.tpm = mean(n.o_c.tpm),
median.n.o_c.tpm = median(n.o_c.tpm),
min.n.o_c.tpm = min(n.o_c.tpm),
max.n.o_c.tpm = max(n.o_c.tpm),
mean.n.c_o.tpm = mean(n.c_o.tpm),
median.n.c_o.tpm = median(n.c_o.tpm),
min.n.c_o.tpm = min(n.c_o.tpm),
max.n.c_o.tpm = max(n.c_o.tpm))
turn.taking.by.child.by.seg
turn.taking.by.sample <- turn.transitions.overview %>%
group_by(sample_type) %>%
summarise(mean.n.o_c.tpm = mean(n.o_c.tpm),
median.n.o_c.tpm = median(n.o_c.tpm),
min.n.o_c.tpm = min(n.o_c.tpm),
max.n.o_c.tpm = max(n.o_c.tpm),
mean.n.c_o.tpm = mean(n.c_o.tpm),
median.n.c_o.tpm = median(n.c_o.tpm),
min.n.c_o.tpm = min(n.c_o.tpm),
max.n.c_o.tpm = max(n.c_o.tpm))
turn.taking.by.sample
turn.taking.by.sample <- turn.transitions.overview %>%
group_by(sample) %>%
summarise(mean.n.o_c.tpm = mean(n.o_c.tpm),
median.n.o_c.tpm = median(n.o_c.tpm),
min.n.o_c.tpm = min(n.o_c.tpm),
max.n.o_c.tpm = max(n.o_c.tpm),
mean.n.c_o.tpm = mean(n.c_o.tpm),
median.n.c_o.tpm = median(n.c_o.tpm),
min.n.c_o.tpm = min(n.c_o.tpm),
max.n.c_o.tpm = max(n.c_o.tpm))
turn.taking.by.sample
View(turn.taking.by.sample)
turn.taking.by.child.bysample <- turn.transitions.overview %>%
group_by(aclew_child_id, sample) %>%
summarise(mean.n.o_c.tpm = mean(n.o_c.tpm),
median.n.o_c.tpm = median(n.o_c.tpm),
min.n.o_c.tpm = min(n.o_c.tpm),
max.n.o_c.tpm = max(n.o_c.tpm),
mean.n.c_o.tpm = mean(n.c_o.tpm),
median.n.c_o.tpm = median(n.c_o.tpm),
min.n.c_o.tpm = min(n.c_o.tpm),
max.n.c_o.tpm = max(n.c_o.tpm))
nrow(turn.taking.by.child.bysample)
i <- 1
subdata <- all.data %>%
filter(aclew_child_id == all.segments$aclew_child_id[i] &
segment == all.segments$segment[i])
c_utt <- subdata %>%
filter(tier == "CHI")
chi.vocs <- mutate(c_utt,
seq.num = rep(NA,nrow(c_utt)),
seq.start = rep(NA,nrow(c_utt)),
seq.start.spkr = rep(NA,nrow(c_utt)),
seq.stop = rep(NA,nrow(c_utt)),
seq.stop.spkr = rep(NA,nrow(c_utt)))
seq.num <- 1
j <- 1
cvoc.start <- chi.vocs$start[j]
cvoc.stop <- chi.vocs$stop[j]
cvoc.start
cvoc.stop
cvoc.xds <- ""
curr.start <- cvoc.start
curr.stop <- cvoc.stop
curr.xds <- cvoc.xds
curr.spk <- "CHI"
curr.start <- chi.vocs$start[j]
curr.stop <- chi.vocs$stop[j]
curr.xds <- ""
curr.spk <- "CHI"
seq.num > 1
stop.looking.left <- FALSE
allowed.gap
tm1.start <- c_utt$start[j] - allowed.gap
tm1.stop <- min((c_utt$start[j] + allowed.overlap), c_utt$stop[j])
grepl("C", curr.spk)
xds.pattern <- ifelse(grepl("C", curr.spk), "[T]", "any")
xds.pattern
