hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id),
data=turn.transitions.tt)
#summary(o_c.tpm.tt.gaus.v2)
#stthr.tri.amidday             -0.035550   0.223546  -0.159              0.8736
#stthr.tri.amorning            -0.127097   0.215122  -0.591              0.5546
#tchiyr.std:stthr.tri.amidday   0.003734   0.213868   0.017              0.9861
#tchiyr.std:stthr.tri.amorning  0.169912   0.227402   0.747              0.4550
# DIFFERENCES?
# very similar to nb model
# Write model results out for input to shiny
o_c.tpm.models <- bind_rows(
broom.mixed::tidy(o_c.tpm.rand.zinb) %>%
mutate(model = "o_c.tpm_random_z-inb"),
broom.mixed::tidy(o_c.tpm.rand.zinb.v2) %>%
mutate(model = "o_c.tpm_random_z-inb.v2"),
broom.mixed::tidy(o_c.tpm.rand.gaus) %>%
mutate(model = "o_c.tpm_random_log_gaus"),
broom.mixed::tidy(o_c.tpm.rand.gaus.v2) %>%
mutate(model = "o_c.tpm_random_log_gaus.v2"),
broom.mixed::tidy(o_c.tpm.tt.nb) %>%
mutate(model = "o_c.tpm_turntaking_nb"),
broom.mixed::tidy(o_c.tpm.tt.nb.v2) %>%
mutate(model = "o_c.tpm_turntaking_nb.v2"),
broom.mixed::tidy(o_c.tpm.tt.gaus) %>%
mutate(model = "o_c.tpm_turntaking_log_gaus"),
broom.mixed::tidy(o_c.tpm.tt.gaus.v2) %>%
mutate(model = "o_c.tpm_turntaking_log_gaus.v2"))
## Sequence duration random sample ####
seqdur.random.distribution <- ggplot(turn.sequences.rand,
aes(round((seq.dur*60),0))) +
geom_histogram() +
ylab("# of clips") +
xlab ("Sequence duration (sec)") +
basic.theme
ggsave(paste0(shiny.input.path, "seqdur_random.distribution.png"),
plot = seqdur.random.distribution,
width = 8, height = 6, dpi = 300)
#sd(round((turn.sequences.rand$seq.dur*60),0))^2
#mean(round((turn.sequences.rand$seq.dur*60),0))
# mean is much smaller than variance
# non-zero values -- no zero inflation
turn.sequences.rand$uniq.segment <- paste0(turn.sequences.rand$aclew_child_id, "-",
turn.sequences.rand$segment)
seqdur.sec.rand.nb <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
stthr.tri +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.rand,
family="nbinom1")
#seqdur.sec.rand.nb.res = simulateResiduals(seqdur.sec.rand.nb)
#plot(seqdur.sec.rand.nb.res, rank = T) # (manually saved)
#summary(seqdur.sec.rand.nb) # (no significant effects)
#Conditional model:
#                               Estimate Std. Error z value Pr(>|z|)
#(Intercept)                    2.216674   0.142451  15.561 <0.0001 ***
#tchiyr.std                     0.105663   0.193521   0.546 0.585
#stthr.trimorning               0.136008   0.174476   0.780 0.436
#stthr.triafternoon             0.128729   0.160016   0.804 0.421
#hsz.std                        0.010461   0.083797   0.125 0.901
#nsk.std                        0.006317   0.048557   0.130 0.896
#tchiyr.std:stthr.trimorning    0.196619   0.188012   1.046 0.296
#tchiyr.std:stthr.triafternoon  0.045138   0.176905   0.255 0.799
#tchiyr.std:hsz.std             0.142867   0.113612   1.257 0.209
#tchiyr.std:nsk.std            -0.032344   0.063522  -0.509 0.611
# no results to save for reporting
# test the other two-way effects of time of day
seqdur.sec.rand.nb.v2 <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.rand,
family="nbinom1")
#summary(seqdur.sec.rand.nb.v2) # (no significant effects)
#stthr.tri.amidday             -0.128729   0.160016  -0.804  0.421
#stthr.tri.amorning             0.007280   0.116200   0.063  0.950
#tchiyr.std:stthr.tri.amidday  -0.045138   0.176905  -0.255  0.799
#tchiyr.std:stthr.tri.amorning  0.151481   0.129067   1.174  0.241
# no results to save for reporting
## Sequence duration tt sample ####
seqdur.tt.distribution <- ggplot(turn.sequences.tt,
aes(round((seq.dur*60),0))) +
geom_histogram() +
ylab("# of clips") +
xlab ("Sequence duration (sec)") +
basic.theme
ggsave(paste0(shiny.input.path, "seqdur_turntaking.distribution.png"),
plot = seqdur.tt.distribution,
width = 8, height = 6, dpi = 300)
#sd(round((turn.sequences.tt$seq.dur*60),0))^2
#mean(round((turn.sequences.tt$seq.dur*60),0))
# mean is much smaller than variance
# non-zero values
turn.sequences.tt$uniq.segment <- paste0(turn.sequences.tt$aclew_child_id, "-",
turn.sequences.tt$segment)
seqdur.sec.tt.nb <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
stthr.tri +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.tt,
family="nbinom1")
#seqdur.sec.tt.nb.res = simulateResiduals(seqdur.sec.tt.nb)
#plot(seqdur.sec.tt.nb.res, rank = T) # (manually saved)
#summary(seqdur.sec.tt.nb)
#Conditional model:
#                              Estimate Std. Error z value  Pr(>|z|)
#(Intercept)                    2.24687    0.13586  16.539  < 0.0001 ***
#tchiyr.std                    -0.18273    0.12115  -1.508  0.13149
#stthr.trimorning               0.05915    0.16101   0.367  0.71336
#stthr.triafternoon             0.37875    0.14522   2.608  0.00911 **
#hsz.std                       -0.17315    0.09966  -1.737  0.08233 .
#nsk.std                       -0.01070    0.05785  -0.185  0.85333
#tchiyr.std:stthr.trimorning   -0.02062    0.16977  -0.121  0.90331
#tchiyr.std:stthr.triafternoon  0.01937    0.14365   0.135  0.89271
#tchiyr.std:hsz.std            -0.17535    0.12841  -1.366  0.17207
#tchiyr.std:nsk.std             0.03003    0.07884   0.381  0.70327
# save for reporting
seqdur.sec.tt.nb.COEF.morn <-
coef(summary(seqdur.sec.tt.nb))[[1]]["stthr.trimorning",]
seqdur.sec.tt.nb.COEF.aft <-
coef(summary(seqdur.sec.tt.nb))[[1]]["stthr.triafternoon",]
seqdur.sec.tt.nb.COEF.hsz <-
coef(summary(seqdur.sec.tt.nb))[[1]]["hsz.std",]
# test the other two-way effects of time of day
seqdur.sec.tt.nb.v2 <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.tt,
family="nbinom1")
#summary(seqdur.sec.tt.nb.v2)
#stthr.tri.amidday             -0.37875    0.14522  -2.608              0.00911 **
#stthr.tri.amorning            -0.31960    0.15110  -2.115              0.03442 *
#tchiyr.std:stthr.tri.amidday  -0.01937    0.14365  -0.135              0.89271
#tchiyr.std:stthr.tri.amorning -0.04000    0.16605  -0.241              0.80965
# save for reporting
seqdur.sec.tt.nb.v2.COEF.morn <-
coef(summary(seqdur.sec.tt.nb.v2))[[1]]["stthr.tri.amorning",]
seqdur.sec.tt.nb.v2.COEF.age.morn <-
coef(summary(seqdur.sec.tt.nb.v2))[[1]]["tchiyr.std:stthr.tri.amorning",]
## Sequence duration random sample ####
seqdur.sec.rand.gaus <- glmmTMB(log(seq.dur) ~
tchiyr.std +
stthr.tri +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.rand)
#seqdur.sec.rand.gaus.res = simulateResiduals(seqdur.sec.rand.gaus)
#plot(seqdur.sec.rand.gaus.res, rank = T) # (manually saved)
#summary(seqdur.sec.rand.gaus) # (no significant effects)
#Conditional model:
#                               Estimate Std. Error z value Pr(>|z|)
#(Intercept)                   -2.238598   0.179612 -12.464 <0.0001 ***
#tchiyr.std                     0.101763   0.247126   0.412 0.680
#stthr.trimorning               0.079977   0.222088   0.360 0.719
#stthr.triafternoon             0.132569   0.203187   0.652 0.514
#hsz.std                        0.007682   0.107943   0.071 0.943
#nsk.std                        0.010111   0.060352   0.168 0.867
#tchiyr.std:stthr.trimorning    0.334872   0.241382   1.387 0.165
#tchiyr.std:stthr.triafternoon  0.109382   0.223645   0.489 0.625
#tchiyr.std:hsz.std             0.166068   0.144025   1.153 0.249
#tchiyr.std:nsk.std            -0.059959   0.080566  -0.744 0.457
# DIFFERENCES?
# very similar to nb model
# test the other two-way effects of time of day
seqdur.sec.rand.gaus.v2 <- glmmTMB(log(seq.dur) ~
tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.rand)
#summary(seqdur.sec.rand.gaus) # (no significant effects)
#stthr.tri.amidday             -0.132569   0.203187  -0.652  0.514
#stthr.tri.amorning            -0.052592   0.146310  -0.359  0.719
#tchiyr.std:stthr.tri.amidday  -0.109382   0.223645  -0.489  0.625
#tchiyr.std:stthr.tri.amorning  0.225490   0.167873   1.343  0.179
# DIFFERENCES?
# very similar to nb model
## Sequence duration tt sample ####
seqdur.sec.tt.gaus <- glmmTMB(log(seq.dur) ~
tchiyr.std +
stthr.tri +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.tt)
#seqdur.sec.tt.gaus.res = simulateResiduals(seqdur.sec.tt.gaus)
#plot(seqdur.sec.tt.gaus.res, rank = T) # (manually saved)
#summary(seqdur.sec.tt.gaus)
#Conditional model:
#                              Estimate Std. Error z value Pr(>|z|)
#(Intercept)                   -2.32810    0.15565 -14.957 <0.0001 ***
#tchiyr.std                    -0.20332    0.14515  -1.401 0.1613
#stthr.trimorning               0.07604    0.19411   0.392 0.6953
#stthr.triafternoon             0.57536    0.18525   3.106 0.0019 **
#hsz.std                       -0.23223    0.11533  -2.014 0.0441 *
#nsk.std                       -0.02348    0.07391  -0.318 0.7507
#tchiyr.std:stthr.trimorning    0.01534    0.20032   0.077 0.9390
#tchiyr.std:stthr.triafternoon -0.01424    0.18700  -0.076 0.9393
#tchiyr.std:hsz.std            -0.19712    0.14911  -1.322 0.1862
#tchiyr.std:nsk.std             0.04998    0.10153   0.492 0.6226
# DIFFERENCES?
# broadly similar to nb model
# test the other two-way effects of time of day
seqdur.sec.tt.gaus.v2 <- glmmTMB(log(seq.dur) ~
tchiyr.std +
stthr.tri.a +
hsz.std +
nsk.std +
tchiyr.std:stthr.tri.a +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id),
data=turn.sequences.tt)
#summary(seqdur.sec.tt.gaus.v2)
#stthr.tri.amidday             -0.57536    0.18525  -3.106              0.0019 **
#stthr.tri.amorning            -0.49932    0.19388  -2.575              0.0100 *
#tchiyr.std:stthr.tri.amidday   0.01424    0.18700   0.076              0.9393
#tchiyr.std:stthr.tri.amorning  0.02958    0.21021   0.141              0.8881
# DIFFERENCES?
# very similar to nb model
# Write model results out for input to shiny
seqdur.sec.models <- bind_rows(
broom.mixed::tidy(seqdur.sec.rand.nb) %>%
mutate(model = "seqdur.sec_random_nb"),
broom.mixed::tidy(seqdur.sec.rand.nb.v2) %>%
mutate(model = "seqdur.sec_random_nb.v2"),
broom.mixed::tidy(seqdur.sec.rand.gaus) %>%
mutate(model = "seqdur.sec_random_log_gaus"),
broom.mixed::tidy(seqdur.sec.rand.gaus.v2) %>%
mutate(model = "seqdur.sec_random_log_gaus.v2"),
broom.mixed::tidy(seqdur.sec.tt.nb) %>%
mutate(model = "seqdur.sec_turntaking_nb"),
broom.mixed::tidy(seqdur.sec.tt.nb.v2) %>%
mutate(model = "seqdur.sec_turntaking_nb.v2"),
broom.mixed::tidy(seqdur.sec.tt.gaus) %>%
mutate(model = "seqdur.sec_turntaking_log_gaus"),
broom.mixed::tidy(seqdur.sec.tt.gaus.v2) %>%
mutate(model = "seqdur.sec_turntaking_log_gaus.v2"))
# get average overall turn transition rate
ttrate.all.avg.bychild <- turn.transitions %>%
filter(grepl("tt", segment)) %>%
replace_na(list(tm1.tier = 0, tp1.tier = 0)) %>%
mutate(tm1.bin = ifelse(tm1.tier == 0, 0, 1),
tp1.bin = ifelse(tp1.tier == 0, 0, 1)) %>%
group_by(aclew_child_id, segment) %>%
summarise(oct.raw = sum(tm1.bin), cot.raw = sum(tp1.bin)) %>%
mutate(segdur = ifelse(grepl('ext', segment), 5, 1)) %>%
group_by(aclew_child_id) %>%
summarise (alltts = sum(oct.raw + cot.raw), sampledur = sum(segdur)) %>%
mutate(peakttrate = alltts/sampledur)
ttrate.all.avg <- mean(ttrate.all.avg.bychild$peakttrate)
# set up a table of tt onset times within the randomly sampled segments
tts.all.rand <- turn.transitions %>%
filter(grepl("rand", segment)) %>%
select(aclew_child_id, segment, tm1.stop, tp1.start)
rand.seg.starts <- seg.info %>%
filter(grepl("rand", CodeName)) %>%
select(aclew_id, CodeName, clipoffset.sec)
rand.seg.secs <- tibble()
for (i in 1:nrow(rand.seg.starts)) {
seg.secs <- tibble(
aclew_child_id = rand.seg.starts$aclew_id[i],
segment = rand.seg.starts$CodeName[i],
segoffset.sec = c(0:299), # seconds in a (5-min) random clip
segtime.sec = seq(rand.seg.starts$clipoffset.sec[i],
(rand.seg.starts$clipoffset.sec[i] + 299), 1),
bin.tt = 0
)
tts.all.rand.chi <- tts.all.rand %>%
filter(aclew_child_id == rand.seg.starts$aclew_id[i],
segment == rand.seg.starts$CodeName[i])
# add in tm1s
tts.all.rand.chi.tm1 <- tts.all.rand.chi$tm1.stop[!is.na(tts.all.rand.chi$tm1.stop)]
if (length(tts.all.rand.chi.tm1) > 0) {
tm1.onsets.sec <- tts.all.rand.chi.tm1/1000
# REMINDER: example use of findInterval:
# findInterval(c(2,5,7,8), c(4,5,6,8,9,10)) => [1] 0 2 3 4
tt.idx <- findInterval(tm1.onsets.sec, seg.secs$segtime.sec)
seg.secs$bin.tt[tt.idx] <- seg.secs$bin.tt[tt.idx] + 1
}
# add in tp1s
tts.all.rand.chi.tp1 <- tts.all.rand.chi$tp1.start[!is.na(tts.all.rand.chi$tp1.start)]
if (length(tts.all.rand.chi.tp1) > 0) {
tp1.onsets.sec <- tts.all.rand.chi.tp1/1000
tt.idx <- findInterval(tp1.onsets.sec, seg.secs$segtime.sec)
seg.secs$bin.tt[tt.idx] <- seg.secs$bin.tt[tt.idx] + 1
}
rand.seg.secs <- bind_rows(rand.seg.secs, seg.secs)
}
# get average tt rates in 1-min windows
rand.window.tts <- rand.seg.secs %>%
filter(segoffset.sec >= 59) %>%
select(-bin.tt) %>%
mutate(ttr.min = 0)
for (chi in unique(rand.seg.secs$aclew_child_id)) {
for (seg in unique(rand.seg.secs$segment)) {
for (minstart in c(1:241)) {
rand.window.tts$ttr.min[which(rand.window.tts$aclew_child_id == chi &
rand.window.tts$segment == seg &
rand.window.tts$segoffset.sec == minstart+59-1)] <-
sum(subset(rand.seg.secs, aclew_child_id == chi &
segment == seg)$bin.tt[(minstart:(minstart+59))])
}
}
}
rand.window.tts <- rand.window.tts %>%
left_join(select(ttrate.all.avg.bychild, c(aclew_child_id, peakttrate))) %>%
mutate(GE.chipeak = ifelse(ttr.min >= peakttrate, 1, 0),
GE.allpeak = ifelse(ttr.min >= ttrate.all.avg, 1, 0))
write_csv(rand.window.tts,
paste0(metadata.path, "ttr.random.1minwindow.csv"))
# calculate # seconds in "peak" tt rates and duration of peaks
ttrGEpeak.segs <- rand.window.tts %>%
filter(GE.allpeak == 1)
ttrGEpeak.segs$prevpeak <- c(-1, ttrGEpeak.segs$segoffset.sec[1:nrow(ttrGEpeak.segs)-1])
ttrGEpeak.segs$newstreak <- ifelse(ttrGEpeak.segs$prevpeak ==
(ttrGEpeak.segs$segoffset.sec - 1), 0, 1)
ttrGEpeak.segs <- select(ttrGEpeak.segs, -prevpeak)
ttrGEpeaks <- filter(ttrGEpeak.segs, newstreak == 1)
ttrGEpeaks$end.sec <- 0
for (i in 1:nrow(ttrGEpeaks)) {
chi <- ttrGEpeaks$aclew_child_id[i]
seg <- ttrGEpeaks$segment[i]
start <- ttrGEpeaks$segoffset.sec[i]
start.idx <- which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec == start)
newstreaks <- which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec > start &
ttrGEpeak.segs$newstreak == 1)
if (length(newstreaks) > 0) {
end.sec <- ttrGEpeak.segs$segoffset.sec[newstreaks[1] - 1]
} else {
end.sec <- ttrGEpeak.segs$segoffset.sec[max(
which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec >= start))]
}
ttrGEpeaks$end.sec[i] <- end.sec + 1
}
ttrGEpeaks <- ttrGEpeaks %>%
mutate(start.sec = segoffset.sec - 59,
peak.dur = end.sec - start.sec)
ttrGEpeaks.summary <- ttrGEpeaks %>%
group_by(aclew_child_id) %>%
summarise(npeaks = n(),
pkdur.mean = mean(peak.dur),
pkdur.sum = sum(peak.dur),
pkdur.mph = ((pkdur.sum/60)/45) * 60) %>% # (peak mns/45 poss mns) * 60 mn/hr
# add back zero estimates for children with no tt peaks in the random data
full_join(select(ptcp.info, aclew_child_id)) %>%
replace_na(list(npeaks = 0, pkdur.mean = 0, pkdur.sum = 0, pkdur.mph = 0))
ttrGEpeak.segs.chi <- rand.window.tts %>%
filter(GE.chipeak == 1)
avg.random.peak.durs <- ttrGEpeaks %>%
group_by(aclew_child_id) %>%
summarise(meandur = mean(peak.dur),
meddur = median(peak.dur))
rand.window.tts <- rand.window.tts %>%
mutate(endoffsetsec = segoffset.sec + 1,
delta.allpeak = ttr.min - ttrate.all.avg) %>%
left_join(ptcp.info)
write_csv(rand.window.tts, paste0(shiny.input.path, "random_window_tts.csv"))
ttr.random <- ggplot(rand.window.tts,
aes(x = as.factor(age_mo_round), y = ttr.min)) +
geom_jitter(color = "gray80", size = 0.3) +
geom_violin(color = "black", fill = "black") +
ylab("High-tt secs/min") + xlab("Age (months)")	+
scale_y_continuous(limits=c(-1, round(max(rand.window.tts$ttr.min) + 5, -1)),
breaks=seq(0, round(max(rand.window.tts$ttr.min) + 5, -1), 10)) +
coord_cartesian(ylim=c(0, round(max(rand.window.tts$ttr.min) + 5, -1))) +
geom_hline(yintercept = ttrate.all.avg, color = "red") +
geom_point(color = "red", size = 2.5, aes(y = peakttrate)) +
#  scale_color_manual(values = viridis(3)) +
#  scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
## Vocal maturity
# all vocalization types
chi.vm.lx.utts <- all.data %>%
filter((tier == "vcm@CHI" | tier == "lex@CHI" | tier == "mwu@CHI") & !is.na(val)) %>%
mutate(voc.rating = ifelse(val == "M", 4,
ifelse((val == "1" | val == "W"), 3,
ifelse((val == "0" | val == "C"), 2,
ifelse(val == "N", 1, 0))))) %>%
filter(voc.rating > 0) %>%
group_by(aclew_child_id, segment, sample, start) %>%
summarise(max_voc.rtg = max(voc.rating))
all.voc.types.per.child <- tibble(
aclew_child_id = rep(ptcp.info$aclew_child_id, 4),
max_voc.rtg = c(rep(1, length(ptcp.info$aclew_child_id)),
rep(2, length(ptcp.info$aclew_child_id)),
rep(3, length(ptcp.info$aclew_child_id)),
rep(4, length(ptcp.info$aclew_child_id)))
)
chi.nvocs <- chi.vm.lx.utts %>%
group_by(aclew_child_id) %>%
summarise(n_vocs = n())
chi.vm.lx.voc.type.props <- chi.vm.lx.utts %>%
group_by(aclew_child_id, max_voc.rtg) %>%
summarise(n_voc.type = n()) %>%
full_join(all.voc.types.per.child, by = c("aclew_child_id", "max_voc.rtg")) %>%
replace_na(list(n_voc.type = 0)) %>%
full_join(chi.nvocs, by = "aclew_child_id") %>%
mutate(prop_voc.type = round(n_voc.type/n_vocs, 3)) %>%
arrange(aclew_child_id, max_voc.rtg) %>%
full_join(ptcp.info, by = "aclew_child_id")
# speech-like vs. non-speech-like only, only under 19mo
chi.vm.lx.utts.all <- all.data %>%
filter((tier == "vcm@CHI" | tier == "lex@CHI" | tier == "mwu@CHI") &
!is.na(val) & age_mo_round < 19) %>%
mutate(voc.rating = ifelse(val == "M", 1,
ifelse((val == "1" | val == "W"), 1,
ifelse((val == "0" | val == "C"), 1, 0)))) %>%
group_by(aclew_child_id, segment, sample, start) %>%
summarise(max_voc.rtg = max(voc.rating))
all.voc.types.per.child.all <- tibble(
aclew_child_id = rep(ptcp.info$aclew_child_id, 2),
max_voc.rtg = c(rep(0, length(ptcp.info$aclew_child_id)),
rep(1, length(ptcp.info$aclew_child_id)))
)
chi.nvocs.all <- chi.vm.lx.utts.all %>%
group_by(aclew_child_id) %>%
summarise(n_vocs = n())
chi.vm.lx.voc.type.props.bin <- chi.vm.lx.utts.all %>%
group_by(aclew_child_id, max_voc.rtg) %>%
summarise(n_voc.type = n()) %>%
left_join(all.voc.types.per.child.all, by = c("aclew_child_id", "max_voc.rtg")) %>%
replace_na(list(n_voc.type = 0)) %>%
left_join(chi.nvocs.all, by = "aclew_child_id") %>%
mutate(prop_voc.type = round(n_voc.type/n_vocs, 3)) %>%
arrange(aclew_child_id, max_voc.rtg) %>%
left_join(ptcp.info, by = "aclew_child_id")
chi.vm.lx.voc.type.props <- chi.vm.lx.voc.type.props %>%
mutate(voc.type = factor(as.factor(max_voc.rtg),
labels = c("NCB", "CB", "SW", "MW")))
write_csv(chi.vm.lx.voc.type.props,
paste0(shiny.input.path,
"all_vocmat-types_proportions.csv"))
voc.mat.by.age <- ggplot(
data = chi.vm.lx.voc.type.props,
aes(x = age_mo_round, y = prop_voc.type, group = as.factor(voc.type))) +
geom_point(aes(color = as.factor(voc.type))) +
geom_smooth(aes(color = as.factor(voc.type),
fill = as.factor(voc.type)), method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
labs(fill='Voc type') +
labs(color='Voc type') +
scale_color_manual(values = c("gray80", "gray54",
"gray27", "black")) +
scale_fill_manual(values = c("gray80", "gray54",
"gray27", "black")) +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() + theme(
legend.position = c(0.9, 0.85),
legend.background = element_rect(fill="transparent"),
axis.line = element_line(color="black", size = 0.4))
voc.mat.by.age
all.models <- bind_rows(TCDS.models, ODS.models,
c_o.tpm.models, o_c.tpm.models,
seqdur.sec.models)
write_csv(all.models, paste0(shiny.input.path, "all_model_tables.csv"))
