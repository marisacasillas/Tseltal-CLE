full_join(all.nonrand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, cvc_min = 0)) %>%
mutate(cvc_mph = (cvc_min/segment_dur)*60) %>%
left_join(dplyr::select(tds.per.seg.nonrand, c("aclew_child_id", "segment", "tds_mph")),
by = c("aclew_child_id", "segment")) %>%
left_join(ptcp.info, by = "aclew_child_id") %>%
mutate(cvc.ovc.delta = cvc_mph-tds_mph,
cvc.ovc.delta.norm = cvc.ovc.delta/(cvc_mph+tds_mph)) %>%
left_join(spkrs.per.seg.all, by = c("aclew_child_id", "segment", "sample", "sample_type")) %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName")) %>%
arrange(aclew_child_id, segment)
# Subset the samples for analysis
turn.transitions.rand_and_tt <- filter(turn.transitions.overview,
sample == "random" | sample == "turn-taking")
turn.sequences.rand_and_tt <- filter(turn.sequences.overview,
sample == "random" | sample == "turn-taking")
cvc.ovc.per.seg.rand_and_tt <- bind_rows(mutate(cvc.ovc.per.seg.rand, sample = "random"),
filter(cvc.ovc.per.seg.nonrand, sample == "turn-taking"))
cvc.ovc.per.seg.rand_and_tt.nonas <- filter(cvc.ovc.per.seg.rand_and_tt, !(is.na(cvc.ovc.delta.norm)))
## Prepare variables for modeling
# prepare predictors for modeling
turn.transitions.rand <- filter(turn.transitions.rand_and_tt, sample == "random")
turn.transitions.rand$child_sex <- as.factor(turn.transitions.rand$child_sex)
turn.transitions.rand$mat_ed <- as.factor(turn.transitions.rand$mat_ed)
nspkrs.m <- mean(turn.transitions.rand$n_spkrs_clip)
nspkrs.sd <- sd(turn.transitions.rand$n_spkrs_clip)
turn.transitions.rand <- turn.transitions.rand %>%
mutate(
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
turn.sequences.rand <- filter(turn.sequences.rand_and_tt, sample == "random")
turn.sequences.rand$child_sex <- as.factor(turn.sequences.rand$child_sex)
turn.sequences.rand$mat_ed <- as.factor(turn.sequences.rand$mat_ed)
nspkrs.m <- mean(turn.sequences.rand$n_spkrs_clip)
nspkrs.sd <- sd(turn.sequences.rand$n_spkrs_clip)
turn.sequences.rand <- turn.sequences.rand %>%
mutate(
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
cvc.ovc.per.seg.randnonas <- filter(cvc.ovc.per.seg.rand_and_tt.nonas, sample == "random")
cvc.ovc.per.seg.randnonas$child_sex <- as.factor(cvc.ovc.per.seg.randnonas$child_sex)
cvc.ovc.per.seg.randnonas$mat_ed <- as.factor(cvc.ovc.per.seg.randnonas$mat_ed)
nspkrs.m <- mean(turn.sequences.rand$n_spkrs_clip)
nspkrs.sd <- sd(turn.sequences.rand$n_spkrs_clip)
cvc.ovc.per.seg.randnonas <- cvc.ovc.per.seg.randnonas %>%
mutate(
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
cvc.ovc.per.seg.randnonas.bychild <- cvc.ovc.per.seg.randnonas %>%
group_by(aclew_child_id) %>%
summarise(mean.ratio = mean(cvc.ovc.delta.norm))
# tt clips
turn.transitions.tt <- filter(turn.transitions.rand_and_tt, sample == "turn-taking")
turn.transitions.tt$child_sex <- as.factor(turn.transitions.tt$child_sex)
turn.transitions.tt$mat_ed <- as.factor(turn.transitions.tt$mat_ed)
nspkrs.m <- mean(turn.transitions.tt$n_spkrs_clip)
nspkrs.sd <- sd(turn.transitions.tt$n_spkrs_clip)
turn.transitions.tt <- turn.transitions.tt %>%
mutate(
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
turn.sequences.tt <- filter(turn.sequences.rand_and_tt, sample == "turn-taking")
turn.sequences.tt$child_sex <- as.factor(turn.sequences.tt$child_sex)
turn.sequences.tt$mat_ed <- as.factor(turn.sequences.tt$mat_ed)
nspkrs.m <- mean(turn.sequences.tt$n_spkrs_clip)
nspkrs.sd <- sd(turn.sequences.tt$n_spkrs_clip)
turn.sequences.tt <- turn.sequences.tt %>%
mutate(
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
cvc.ovc.per.seg.ttnonas <- filter(cvc.ovc.per.seg.rand_and_tt.nonas, sample == "turn-taking")
cvc.ovc.per.seg.ttnonas$child_sex <- as.factor(cvc.ovc.per.seg.ttnonas$child_sex)
cvc.ovc.per.seg.ttnonas$mat_ed <- as.factor(cvc.ovc.per.seg.ttnonas$mat_ed)
nspkrs.m <- mean(cvc.ovc.per.seg.ttnonas$n_spkrs_clip)
nspkrs.sd <- sd(cvc.ovc.per.seg.ttnonas$n_spkrs_clip)
cvc.ovc.per.seg.ttnonas <- cvc.ovc.per.seg.ttnonas %>%
mutate(
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
cvc.ovc.per.seg.ttnonas.bychild <- cvc.ovc.per.seg.ttnonas %>%
group_by(aclew_child_id) %>%
summarise(mean.ratio = mean(cvc.ovc.delta.norm))
# Graph the basic turn taking rate info
# CHI-OTH transitions per minute
chi.oth.tts.rand_and_tt <- ggplot(turn.transitions.rand_and_tt,
aes(x = age_mo_round, y = n.c_o.tpm, lty = sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, sample),
color = sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = sample, color = sample), method = "lm") +
ylab("CHI-OTH tts/min") + xlab("")	+
scale_y_continuous(limits=c(0,30),
breaks=seq(0,30,5)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,30),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# OTH-CHI transitions per minute
oth.chi.tts.rand_and_tt <- ggplot(turn.transitions.rand_and_tt,
aes(x = age_mo_round, y = n.o_c.tpm, lty = sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, sample),
color = sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = sample, color = sample), method = "lm") +
ylab("OTH-CHI tts/min") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,30),
breaks=seq(0,30,5)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,30),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# Graph the basic sequence duration info
# plot per-clip averages so it's consistent with the rest
turn.sequences.rand_and_tt.byclip <- turn.sequences.rand_and_tt %>%
group_by(aclew_child_id, age_mo_round, sample, segment) %>%
summarise(m.seqdur.sec = mean(seq.dur*60))
seq.dur.rand_and_tt <- ggplot(turn.sequences.rand_and_tt.byclip,
aes(x = age_mo_round, y = m.seqdur.sec, lty = sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, sample),
color = sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = sample, color = sample), method = "lm") +
ylab("Seq. dur. (sec)") + xlab("")	+
scale_y_continuous(limits=c(0,60),
breaks=seq(0,60,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,60),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
grid.arrange(chi.oth.tts.rand_and_tt, oth.chi.tts.rand_and_tt,
seq.dur.rand_and_tt, nrow=1, ncol=3)
## CHI-OTH tts/min random sample ####
#ggplot(turn.transitions.rand, aes(round(n.c_o.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.rand$n.c_o.tpm,0))^2
#mean(round(turn.transitions.rand$n.c_o.tpm,0))
# mean isn't much smaller than variance
# zero inflated
c_o.tpm.rand.zinb <- glmmTMB(round(n.c_o.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.rand,
ziformula=~tchiyr.std+I(stthr.std^2)+nsk.std,
family="nbinom1")
#res = simulateResiduals(c_o.tpm.rand.zinb)
#plot(res, rank = T)
#summary(c_o.tpm.rand.zinb)
#tchiyr.std                  0.8214     0.4774   1.721   0.0853 .
#nsk.std                    -0.3253     0.1779  -1.828   0.0675 .
#tchiyr.std:I(stthr.std^2)  -6.4614     2.5642  -2.520   0.0117 *
#tchiyr.std:nsk.std          0.4745     0.2248   2.110   0.0348 *
# ZI:
#I(stthr.std^2) -26.8775    15.6249  -1.720   0.0854 .
#nsk.std         -3.1740     1.8207  -1.743   0.0813 .
# save for reporting
c_o.tpm.rand.zinb.COEF.agetime <-
coef(summary(c_o.tpm.rand.zinb))[[1]]["tchiyr.std:I(stthr.std^2)",]
c_o.tpm.rand.zinb.COEF.agensk <-
coef(summary(c_o.tpm.rand.zinb))[[1]]["tchiyr.std:nsk.std",]
c_o.tpm.rand.zinb.COEF.ZItime <-
coef(summary(c_o.tpm.rand.zinb))[[2]]["I(stthr.std^2)",]
c_o.tpm.rand.zinb.COEF.ZInsk <-
coef(summary(c_o.tpm.rand.zinb))[[2]]["nsk.std",]
## CHI-OTH tts/min tt sample ####
#ggplot(turn.transitions.tt, aes(round(n.c_o.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.tt$n.c_o.tpm,0))^2
#mean(round(turn.transitions.tt$n.c_o.tpm,0))
# mean isn't much smaller than variance
# not zero-inflated (nature of sample)
c_o.tpm.tt.nb <- glmmTMB(round(n.c_o.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.tt,
family="nbinom1")
#res = simulateResiduals(c_o.tpm.tt.nb)
#plot(res, rank = T)
#summary(c_o.tpm.tt.nb)
#nsk.std                   -0.26254    0.11330  -2.317   0.0205 *
#tchiyr.std:I(stthr.std^2) -3.22865    1.58125  -2.042   0.0412 *
## OTH-CHI tts/min random sample ####
#ggplot(turn.transitions.rand, aes(round(n.o_c.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.rand$n.o_c.tpm,0))^2
#mean(round(turn.transitions.rand$n.o_c.tpm,0))
# mean isn't much smaller than variance
# zero-inflated
o_c.tpm.rand.zinb <- glmmTMB(round(n.o_c.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.rand,
ziformula=~tchiyr.std+I(stthr.std^2)+nsk.std,
family="nbinom1")
#res = simulateResiduals(o_c.tpm.rand.zinb)
#plot(res, rank = T)
#summary(o_c.tpm.rand.zinb)
#tchiyr.std                  0.9137     0.4955   1.844  0.06520 .
#tchiyr.std:I(stthr.std^2)  -7.2977     2.6100  -2.796  0.00517 **
# ZI:
#I(stthr.std^2) -23.7206    13.7559  -1.724   0.0846 .
# save for reporting
o_c.tpm.rand.zinb.COEF.agetime <-
coef(summary(o_c.tpm.rand.zinb))[[1]]["tchiyr.std:I(stthr.std^2)",]
## OTH-CHI tts/min tt sample ####
#ggplot(turn.transitions.tt, aes(round(n.o_c.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.tt$n.o_c.tpm,0))^2
#mean(round(turn.transitions.tt$n.o_c.tpm,0))
# mean is much smaller than variance
# not really zero-inflated
o_c.tpm.tt.nb <- glmmTMB(round(n.o_c.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.tt,
family="nbinom1")
#res = simulateResiduals(o_c.tpm.tt.nb)
#plot(res, rank = T)
#summary(o_c.tpm.tt.nb)
#nsk.std                   -0.26295    0.11984  -2.194   0.0282 *
#tchiyr.std:I(stthr.std^2) -3.06715    1.68891  -1.816   0.0694 .
# save for reporting
o_c.tpm.tt.nb.COEF.nsk <-
coef(summary(o_c.tpm.tt.nb))[[1]]["nsk.std",]
## Sequence duration random sample ####
#ggplot(turn.sequences.rand, aes(round((seq.dur*60),0))) + geom_histogram()
#sd(round((turn.sequences.rand$seq.dur*60),0))^2
#mean(round((turn.sequences.rand$seq.dur*60),0))
# mean is much smaller than variance
# non-zero values
turn.sequences.rand$uniq.segment <- paste0(turn.sequences.rand$aclew_child_id, "-",
turn.sequences.rand$segment)
seqdur.sec.rand.nb <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.sequences.rand,
family="nbinom1")
#res = simulateResiduals(seqdur.sec.rand.nb)
#plot(res, rank = T)
#summary(seqdur.sec.rand.nb) # (no significant effects)
#tchiyr.std:hsz.std         0.18889    0.11012   1.715    0.0863 .
# save for reporting
seqdur.sec.rand.nb.COEF.agehsz <-
coef(summary(seqdur.sec.rand.nb))[[1]]["tchiyr.std:hsz.std",]
## Sequence duration tt sample ####
#ggplot(turn.sequences.tt, aes(round((seq.dur*60),0))) + geom_histogram()
#sd(round((turn.sequences.tt$seq.dur*60),0))^2
#mean(round((turn.sequences.tt$seq.dur*60),0))
# mean is much smaller than variance
# non-zero values
turn.sequences.tt$uniq.segment <- paste0(turn.sequences.tt$aclew_child_id, "-",
turn.sequences.tt$segment)
seqdur.sec.tt.nb <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1+I(stthr.std^2)|aclew_child_id),
data=turn.sequences.tt,
family="nbinom1")
#res = simulateResiduals(seqdur.sec.tt.nb)
#plot(res, rank = T)
#summary(seqdur.sec.tt.nb)
#tchiyr.std                -0.242902   0.100557  -2.416   0.0157 *
#I(stthr.std^2)             2.764077   1.107589   2.496   0.0126 *
#hsz.std                   -0.213677   0.095170  -2.245   0.0248 *
#tchiyr.std:hsz.std        -0.205633   0.117426  -1.751   0.0799 .
# save for reporting
seqdur.sec.tt.nb.COEF.age <-
coef(summary(seqdur.sec.tt.nb))[[1]]["tchiyr.std",]
seqdur.sec.tt.nb.COEF.time <-
coef(summary(seqdur.sec.tt.nb))[[1]]["I(stthr.std^2)",]
seqdur.sec.tt.nb.COEF.hsz <-
coef(summary(seqdur.sec.tt.nb))[[1]]["hsz.std",]
# get average overall turn transition rate
ttrate.all.avg.bychild <- turn.transitions %>%
filter(grepl("tt", segment)) %>%
replace_na(list(tm1.tier = 0, tp1.tier = 0)) %>%
mutate(tm1.bin = ifelse(tm1.tier == 0, 0, 1),
tp1.bin = ifelse(tp1.tier == 0, 0, 1)) %>%
group_by(aclew_child_id, segment) %>%
summarise(oct.raw = sum(tm1.bin), cot.raw = sum(tp1.bin)) %>%
mutate(segdur = ifelse(grepl('ext', segment), 5, 1)) %>%
group_by(aclew_child_id) %>%
summarise (alltts = sum(oct.raw + cot.raw), sampledur = sum(segdur)) %>%
mutate(peakttrate = alltts/sampledur)
ttrate.all.avg <- mean(ttrate.all.avg.bychild$peakttrate)
# set up a table of tt onset times within the randomly sampled segments
tts.all.rand <- turn.transitions %>%
filter(grepl("rand", segment)) %>%
select(aclew_child_id, segment, tm1.stop, tp1.start)
rand.seg.starts <- seg.info %>%
filter(grepl("rand", CodeName)) %>%
select(aclew_id, CodeName, clipoffset.sec)
rand.seg.secs <- tibble()
for (i in 1:nrow(rand.seg.starts)) {
seg.secs <- tibble(
aclew_child_id = rand.seg.starts$aclew_id[i],
segment = rand.seg.starts$CodeName[i],
segoffset.sec = c(0:299), # seconds in a (5-min) random clip
segtime.sec = seq(rand.seg.starts$clipoffset.sec[i],
(rand.seg.starts$clipoffset.sec[i] + 299), 1),
bin.tt = 0
)
tts.all.rand.chi <- tts.all.rand %>%
filter(aclew_child_id == rand.seg.starts$aclew_id[i],
segment == rand.seg.starts$CodeName[i])
# add in tm1s
tts.all.rand.chi.tm1 <- tts.all.rand.chi$tm1.stop[!is.na(tts.all.rand.chi$tm1.stop)]
if (length(tts.all.rand.chi.tm1) > 0) {
tm1.onsets.sec <- tts.all.rand.chi.tm1/1000
# REMINDER: example use of findInterval:
# findInterval(c(2,5,7,8), c(4,5,6,8,9,10)) => [1] 0 2 3 4
tt.idx <- findInterval(tm1.onsets.sec, seg.secs$segtime.sec)
seg.secs$bin.tt[tt.idx] <- seg.secs$bin.tt[tt.idx] + 1
}
# add in tp1s
tts.all.rand.chi.tp1 <- tts.all.rand.chi$tp1.start[!is.na(tts.all.rand.chi$tp1.start)]
if (length(tts.all.rand.chi.tp1) > 0) {
tp1.onsets.sec <- tts.all.rand.chi.tp1/1000
tt.idx <- findInterval(tp1.onsets.sec, seg.secs$segtime.sec)
seg.secs$bin.tt[tt.idx] <- seg.secs$bin.tt[tt.idx] + 1
}
rand.seg.secs <- bind_rows(rand.seg.secs, seg.secs)
}
# get average tt rates in 1-min windows
rand.window.tts <- rand.seg.secs %>%
filter(segoffset.sec >= 59) %>%
select(-bin.tt) %>%
mutate(ttr.min = 0)
for (chi in unique(rand.seg.secs$aclew_child_id)) {
for (seg in unique(rand.seg.secs$segment)) {
for (minstart in c(1:241)) {
rand.window.tts$ttr.min[which(rand.window.tts$aclew_child_id == chi &
rand.window.tts$segment == seg &
rand.window.tts$segoffset.sec == minstart+59-1)] <-
sum(subset(rand.seg.secs, aclew_child_id == chi &
segment == seg)$bin.tt[(minstart:(minstart+59))])
}
}
}
rand.window.tts <- rand.window.tts %>%
left_join(select(ttrate.all.avg.bychild, c(aclew_child_id, peakttrate))) %>%
mutate(GE.chipeak = ifelse(ttr.min >= peakttrate, 1, 0),
GE.allpeak = ifelse(ttr.min >= ttrate.all.avg, 1, 0))
write_csv(rand.window.tts, "ttr.random.1minwindow.csv")
# calculate # seconds in "peak" tt rates and duration of peaks
ttrGEpeak.segs <- rand.window.tts %>%
filter(GE.allpeak == 1)
ttrGEpeak.segs$prevpeak <- c(-1, ttrGEpeak.segs$segoffset.sec[1:nrow(ttrGEpeak.segs)-1])
ttrGEpeak.segs$newstreak <- ifelse(ttrGEpeak.segs$prevpeak ==
(ttrGEpeak.segs$segoffset.sec - 1), 0, 1)
ttrGEpeak.segs <- select(ttrGEpeak.segs, -prevpeak)
ttrGEpeaks <- filter(ttrGEpeak.segs, newstreak == 1)
ttrGEpeaks$end.sec <- 0
for (i in 1:nrow(ttrGEpeaks)) {
chi <- ttrGEpeaks$aclew_child_id[i]
seg <- ttrGEpeaks$segment[i]
start <- ttrGEpeaks$segoffset.sec[i]
start.idx <- which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec == start)
newstreaks <- which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec > start &
ttrGEpeak.segs$newstreak == 1)
if (length(newstreaks) > 0) {
end.sec <- ttrGEpeak.segs$segoffset.sec[newstreaks[1] - 1]
} else {
end.sec <- ttrGEpeak.segs$segoffset.sec[max(
which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec >= start))]
}
ttrGEpeaks$end.sec[i] <- end.sec + 1
}
ttrGEpeaks <- ttrGEpeaks %>%
mutate(start.sec = segoffset.sec - 59,
peak.dur = end.sec - start.sec)
ttrGEpeaks.summary <- ttrGEpeaks %>%
group_by(aclew_child_id) %>%
summarise(npeaks = n(),
pkdur.mean = mean(peak.dur),
pkdur.sum = sum(peak.dur),
pkdur.mph = ((pkdur.sum/60)/45) * 60) %>% # (peak mins/45 poss mins) * 60 for min/hr
# add back zero estimates for children with no tt peaks in the random data
full_join(select(ptcp.info, aclew_child_id)) %>%
replace_na(list(npeaks = 0, pkdur.mean = 0, pkdur.sum = 0, pkdur.mph = 0))
ttrGEpeak.segs.chi <- rand.window.tts %>%
filter(GE.chipeak == 1)
avg.random.peak.durs <- ttrGEpeaks %>%
group_by(aclew_child_id) %>%
summarise(meandur = mean(peak.dur),
meddur = median(peak.dur))
ttrGEpeaks.summary
ttrGEpeaks.summary
35*14
