arrange(aclew_child_id, segment, SpkrAge)
# All CDS
cds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(cds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, cds_min.sa = 0)) %>%
mutate(cds_mph.sa = (cds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# Number of speakers per clip
spkrs.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, SpkrAge, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.rand.sa <- xds.per.seg.rand.sa %>%
full_join(ods.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(tds.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(cds.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(dplyr::select(quantity.rand, c("aclew_child_id", "segment", "tds_min")),
by = c("aclew_child_id", "segment")) %>%
full_join(spkrs.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge", "segment")) %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
replace_na(list(xds_min.sa = 0, xds_mph.sa = 0,
ods_min.sa = 0, ods_mph.sa = 0,
tds_min.sa = 0, tds_mph.sa = 0,
cds_min.sa = 0, cds_mph.sa = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds.sa = tds_min.sa/xds_min.sa,
prop_sa.tds = tds_min.sa/tds_min)
# Don't replace NAs with 0s in this case; proportion is not meaningful w/o any speech
# NON-RANDOM
# Get min/hr speech measures
all.nonrand.segments <- seg.info %>%
filter(!(grepl("random", CodeName))) %>%
select(aclew_id, CodeName) %>%
rename(aclew_child_id = aclew_id, segment = CodeName)
all.nonrand.segments$sample <- ifelse(grepl("va", all.nonrand.segments$segment),
"high-activity","turn-taking")
all.nonrand.segments$sample_type <- ifelse(grepl("^va", all.nonrand.segments$segment),
"high-activity", ifelse(
grepl("^tt", all.nonrand.segments$segment),"turn-taking",
"extension"))
# XDS
xds.per.seg.nonrand <- all.data %>%
filter(sample != "random" & speaker != "CHI" &
grepl("xds@", tier)) %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(xds_min = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 1, xds_min = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
xds_mph = (xds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# ODS
ods.per.seg.nonrand <- all.data %>%
filter(sample != "random" & speaker != "CHI" &
grepl("xds@", tier) & val != "T") %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(ods_min = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 1, ods_min = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
ods_mph = (ods_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# TDS
tds.per.seg.nonrand <- all.data %>%
filter(sample != "random" & speaker != "CHI" &
grepl("xds@", tier) & val == "T") %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(tds_min = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 1, tds_min = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
tds_mph = (tds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# All CDS
cds.per.seg.nonrand <- all.data %>%
filter(sample != "random" & speaker != "CHI" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(cds_min = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 1, cds_min = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
cds_mph = (cds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# Number of speakers per clip
spkrs.per.seg.nonrand <- all.data %>%
filter(sample != "random" & speaker != "CHI" & SpkrAge != "Not known" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.nonrand <- xds.per.seg.nonrand %>%
full_join(ods.per.seg.nonrand, by = c("aclew_child_id", "segment",
"segment_dur", "sample", "sample_type")) %>%
full_join(tds.per.seg.nonrand, by = c("aclew_child_id", "segment",
"segment_dur", "sample", "sample_type")) %>%
full_join(cds.per.seg.nonrand, by = c("aclew_child_id", "segment",
"segment_dur", "sample", "sample_type")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
full_join(spkrs.per.seg.nonrand, by = c("aclew_child_id", "segment")) %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName")) %>%
replace_na(list(xds_min = 0, xds_mph = 0,
ods_min = 0, ods_mph = 0,
tds_min = 0, tds_mph = 0,
cds_min = 0, cds_mph = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds = tds_min/xds_min)
# Don't replace NAs with 0s in this case; proportion is not meaningful w/o any speech
quantity.nonrand.bychild <- quantity.nonrand %>%
group_by(aclew_child_id, sample) %>%
summarise(
xds_min = mean(xds_min),
xds_mph = mean(xds_mph),
ods_min = mean(ods_min),
ods_mph = mean(ods_mph),
tds_min = mean(tds_min),
tds_mph = mean(tds_mph),
cds_min = mean(cds_min),
cds_mph = mean(cds_mph),
prop_tds = mean(prop_tds, na.rm = TRUE),
m_n_spkrs = mean(n_spkrs_clip)) %>%
full_join(ptcp.info, by = "aclew_child_id")
# Get xds and tds min/hr by speaker type
all.nonrand.segments.sa <- tibble(
aclew_child_id = rep(all.nonrand.segments$aclew_child_id, 2),
segment = rep(all.nonrand.segments$segment, 2),
sample = rep(all.nonrand.segments$sample, 2),
sample_type = rep(all.nonrand.segments$sample_type, 2),
SpkrAge = c(rep("Adult", nrow(all.nonrand.segments)),
rep("Child", nrow(all.nonrand.segments))))
# XDS
xds.per.seg.nonrand.sa <- all.data %>%
filter(sample != "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier)) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(xds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 1, xds_min.sa = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
xds_mph.sa = (xds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# ODS
ods.per.seg.nonrand.sa <- all.data %>%
filter(sample != "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & val != "T") %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(ods_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 1, ods_min.sa = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
ods_mph.sa = (ods_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# TDS
tds.per.seg.nonrand.sa <- all.data %>%
filter(sample != "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & val == "T") %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(tds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 1, tds_min.sa = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
tds_mph.sa = (tds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# All CDS
cds.per.seg.nonrand.sa <- all.data %>%
filter(sample != "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(cds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.nonrand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 1, cds_min.sa = 0)) %>%
mutate(segment_dur = ifelse(grepl("ext", segment), 5, 1),
cds_mph.sa = (cds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# Number of speakers per clip
spkrs.per.seg.nonrand.sa <- all.data %>%
filter(sample != "random" & speaker != "CHI" & SpkrAge != "Not known" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, SpkrAge, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.nonrand.sa <- xds.per.seg.nonrand.sa %>%
full_join(ods.per.seg.nonrand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur",
"sample", "sample_type")) %>%
full_join(tds.per.seg.nonrand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur",
"sample", "sample_type")) %>%
full_join(cds.per.seg.nonrand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur",
"sample", "sample_type")) %>%
full_join(select(quantity.nonrand, c("aclew_child_id", "segment", "tds_min")),
by = c("aclew_child_id", "segment")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
full_join(spkrs.per.seg.nonrand.sa, by = c("aclew_child_id", "SpkrAge", "segment")) %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName")) %>%
replace_na(list(xds_min.sa = 0, xds_mph.sa = 0,
ods_min.sa = 0, ods_mph.sa = 0,
tds_min.sa = 0, tds_mph.sa = 0,
cds_min.sa = 0, cds_mph.sa = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds.sa = tds_min.sa/xds_min.sa,
prop_sa.tds = tds_min.sa/tds_min)
# Don't replace NAs with 0s in this case; proportion is not meaningful w/o any speech
# Subset the non-random samples (used for differnt purposes)
quantity.nonrand.tt <- filter(quantity.nonrand, sample == "turn-taking")
quantity.nonrand.tt.sa <- filter(quantity.nonrand.sa, sample == "turn-taking")
quantity.nonrand.va <- filter(quantity.nonrand, sample != "turn-taking")
quantity.nonrand.va.sa <- filter(quantity.nonrand.sa, sample != "turn-taking")
## Get variables ready for modeling
# random sample
quantity.rand$child_sex <- as.factor(quantity.rand$child_sex)
quantity.rand$mat_ed <- as.factor(quantity.rand$mat_ed)
nspkrs.m <- mean(quantity.rand$n_spkrs_clip)
nspkrs.sd <- sd(quantity.rand$n_spkrs_clip)
quantity.rand <- quantity.rand %>%
mutate(
xds_mph.nz = ifelse(xds_mph > 0, 1, 0),
ods_mph.nz = ifelse(ods_mph > 0, 1, 0),
tds_mph.nz = ifelse(tds_mph > 0, 1, 0),
cds_mph.nz = ifelse(cds_mph > 0, 1, 0),
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
quantity.rand.sa$child_sex <- as.factor(quantity.rand.sa$child_sex)
quantity.rand.sa$mat_ed <- as.factor(quantity.rand.sa$mat_ed)
nspkrs.sa.m <- mean(quantity.rand.sa$n_spkrs_clip)
nspkrs.sa.sd <- sd(quantity.rand.sa$n_spkrs_clip)
quantity.rand.sa <- quantity.rand.sa %>%
mutate(
xds_mph.sa.nz = ifelse(xds_mph.sa > 0, 1, 0),
ods_mph.sa.nz = ifelse(ods_mph.sa > 0, 1, 0),
tds_mph.sa.nz = ifelse(tds_mph.sa > 0, 1, 0),
cds_mph.sa.nz = ifelse(cds_mph.sa > 0, 1, 0),
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.sa.m)/nspkrs.sa.sd),
stthr.std = (start.hr - 12)/12)
# tt sample
quantity.nonrand.tt$child_sex <- as.factor(quantity.nonrand.tt$child_sex)
quantity.nonrand.tt$mat_ed <- as.factor(quantity.nonrand.tt$mat_ed)
nspkrs.m <- mean(quantity.nonrand.tt$n_spkrs_clip)
nspkrs.sd <- sd(quantity.nonrand.tt$n_spkrs_clip)
quantity.nonrand.tt <- quantity.nonrand.tt %>%
mutate(
xds_mph.nz = ifelse(xds_mph > 0, 1, 0),
ods_mph.nz = ifelse(ods_mph > 0, 1, 0),
tds_mph.nz = ifelse(tds_mph > 0, 1, 0),
cds_mph.nz = ifelse(cds_mph > 0, 1, 0),
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.m)/nspkrs.sd),
stthr.std = (start.hr - 12)/12)
quantity.nonrand.tt.sa$child_sex <- as.factor(quantity.nonrand.tt.sa$child_sex)
quantity.nonrand.tt.sa$mat_ed <- as.factor(quantity.nonrand.tt.sa$mat_ed)
nspkrs.sa.m <- mean(quantity.nonrand.tt.sa$n_spkrs_clip)
nspkrs.sa.sd <- sd(quantity.nonrand.tt.sa$n_spkrs_clip)
quantity.nonrand.tt.sa <- quantity.nonrand.tt.sa %>%
mutate(
xds_mph.sa.nz = ifelse(xds_mph.sa > 0, 1, 0),
ods_mph.sa.nz = ifelse(ods_mph.sa > 0, 1, 0),
tds_mph.sa.nz = ifelse(tds_mph.sa > 0, 1, 0),
cds_mph.sa.nz = ifelse(cds_mph.sa > 0, 1, 0),
tchiyr.std = ((age_mo_round - tchiyr.m)/tchiyr.sd),
chisx.std = recode_factor(child_sex,
"M" = "M", "F" = "F"),
mated.std = recode_factor(mat_ed,
"none" = "none", "primary" = "primary",
"secondary" = "secondary", "preparatory" = "preparatory"),
mated.bin = recode_factor(mat_ed,
"none" = "0-5", "primary" = "0-5",
"secondary" = "6+", "preparatory" = "6+"),
motyr.std = ((mother_age - motyr.m)/motyr.sd),
nsb.std = ((number_older_sibs - nsb.m)/nsb.sd),
hsz.std = ((household_size - hsz.m)/hsz.sd),
nsk.std = ((n_spkrs_clip - nspkrs.sa.m)/nspkrs.sa.sd),
stthr.std = (start.hr - 12)/12)
quantity.nonrand.tt.minimum <- dplyr::select(quantity.nonrand.tt,
age_mo_round, xds_mph, ods_mph, tds_mph,
prop_tds, n_spkrs_clip) %>%
mutate(Sample = "Turn taking")
quantity.rand.minimum <- dplyr::select(quantity.rand,
age_mo_round, xds_mph, ods_mph, tds_mph,
prop_tds, n_spkrs_clip) %>%
mutate(Sample = "Random")
quantity.rand_and_tt <- bind_rows(quantity.nonrand.tt.minimum, quantity.rand.minimum)
quantity.nonrand.sa.tt.minimum <- dplyr::select(quantity.nonrand.tt.sa,
age_mo_round, prop_sa.tds, SpkrAge) %>%
mutate(Sample = "Turn taking")
quantity.rand.sa.minimum <- dplyr::select(quantity.rand.sa,
age_mo_round, prop_sa.tds, SpkrAge) %>%
mutate(Sample = "Random")
quantity.sa.rand_and_tt <- bind_rows(quantity.nonrand.sa.tt.minimum, quantity.rand.sa.minimum)
# ODS min/hr
odsmph.segments.rand_and_tt <- ggplot(quantity.rand_and_tt,
aes(x = age_mo_round, y = ods_mph, lty = Sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, Sample),
color = Sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = Sample, color = Sample), method = "lm") +
ylab("ODS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-10,80),
breaks=seq(0,80,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,80),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# TDS min/hr
tdsmph.segments.rand_and_tt <- ggplot(quantity.rand_and_tt,
aes(x = age_mo_round, y = tds_mph, lty = Sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, Sample),
color = Sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = Sample, color = Sample), method = "lm") +
ylab("TCDS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,80),
breaks=seq(0,80,20)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,80),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# TDS min/hr - zoomed in
tdsmph.segments.rand_and_tt.zoomedin <- ggplot(quantity.rand_and_tt,
aes(x = age_mo_round, y = tds_mph, lty = Sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, Sample),
color = Sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = Sample, color = Sample), method = "lm") +
ylab("TCDS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,40),
breaks=seq(0,40,10)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,40),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# TDS prop
tdsprp.segments.rand_and_tt <- ggplot(quantity.rand_and_tt,
aes(x = age_mo_round, y = prop_tds, lty = Sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, Sample),
color = Sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = Sample, color = Sample), method = "lm") +
ylab("TCDS/All spch") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1),xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# prop TDS from children
tdsprp.segments.rand_and_tt.sa <- ggplot(subset(quantity.sa.rand_and_tt, SpkrAge == "Child"),
aes(x = age_mo_round, y = prop_sa.tds, lty = Sample)) +
geom_boxplot(aes(group = interaction(age_mo_round, Sample),
color = Sample), fill = "white", outlier.shape = NA,
lty = "solid", alpha = 0.4) +
geom_smooth(aes(fill = Sample, color = Sample), method = "lm") +
ylab("Prop of TCDS") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(-.2,1.2),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# Prep comparison data for matching figures
comparison.data <- read_csv(comparison.file)
tds.mph.tofill <- which(is.na(comparison.data$tds_mph) & !(is.na(comparison.data$tds_uph)))
comparison.data$tds_mph[tds.mph.tofill] <- ((comparison.data$tds_uph[tds.mph.tofill] *
avg.utt.len.tseltal$median.utt.len)/60000)
ods.mph.tofill <- which(is.na(comparison.data$ods_mph) & !(is.na(comparison.data$ods_uph)))
comparison.data$ods_mph[ods.mph.tofill] <- ((comparison.data$ods_uph[ods.mph.tofill] *
avg.utt.len.tseltal$median.utt.len)/60000)
xds.mph.tofill <- which(is.na(comparison.data$xds_mph) &
!(is.na(comparison.data$ods_mph)) & !(is.na(comparison.data$tds_mph)))
comparison.data$xds_mph[xds.mph.tofill] <- comparison.data$ods_mph[xds.mph.tofill] +
comparison.data$tds_mph[xds.mph.tofill]
# Add in current data
by.chi.rand.avgs <- quantity.rand %>%
ungroup() %>%
select(age_mo_round, ods_mph, cds_mph, tds_mph, xds_mph, prop_tds) %>%
group_by(age_mo_round) %>%
summarise(ods_mph = mean(ods_mph),
cds_mph = mean(cds_mph),
tds_mph = mean(tds_mph),
xds_mph = mean(xds_mph),
prp_tds = mean(prop_tds, na.rm = TRUE)) %>%
rename(AgeMonths = age_mo_round) %>%
mutate(ods_uph = NA,
tds_uph = NA,
xds_uph = NA,
prp_tds_adu = NA,
prp_tds_chi = NA,
shape = 8,
N = 1,
Type = "Rural, non-WEIRD",
Site = "Tseltal",
Reference = "The current study",
Notes = "")
comparison.data <- bind_rows(comparison.data, by.chi.rand.avgs)
comparison.data$Site <- factor(comparison.data$Site,
levels = unique(comparison.data$Site))
comparison.data.shapes <- unique(comparison.data$shape)
# TDS min/hr comparison
tdsmph.comparison <- ggplot(comparison.data,
aes(x = AgeMonths, y = tds_mph, stroke = 1,
color = Type, shape = Site, size = N)) +
geom_point() +
scale_shape_manual(values=comparison.data.shapes) +
ylab("TCDS (min/hr)") + xlab("Child age (mo)")	+
scale_y_continuous(limits=c(0,20),
breaks=seq(0,20,5)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,20),xlim=c(0,38)) +
scale_color_manual(values = c("black", "gray60")) +
scale_fill_manual(values = c("black", "gray60")) +
theme_apa() +
guides(size = FALSE, color = FALSE) +
theme(axis.line = element_line(color="black", size = 0.4))
tdsmph.comparison
tds.tt.nb <- glmmTMB(round(tds_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=quantity.nonrand.tt,
family="nbinom1")
res = simulateResiduals(tds.rand.zinb)
res = simulateResiduals(tds.rand.zinb)
plot(res, rank = T)
res = simulateResiduals(tds.tt.nb)
plot(res, rank = T)
summary(tds.tt.nb)
tds.tt.nb <- glmmTMB(round(tds_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=quantity.nonrand.tt,
ziformula = ~tchiyr.std,
family="nbinom1")
