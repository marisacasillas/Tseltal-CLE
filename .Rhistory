ziformula=~tchiyr.std*I(stthr.std^2),#nsk.std
family="nbinom1")
ods.tt.zinb <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
mated.bin +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:mated.bin +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt,
ziformula=~tchiyr.std, #I(stthr.std^2),nsk.std
family="nbinom1")
summary(ods.tt.zinb)
ods.tt.zinb <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
mated.bin +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:mated.bin +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt,
ziformula=~I(stthr.std^2), #I(stthr.std^2),nsk.std
family="nbinom1")
summary(ods.tt.zinb)
ods.tt.zinb <- glmmTMB(round(ods_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
mated.bin +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:mated.bin +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt,
ziformula=~tchiyr.std, #I(stthr.std^2),nsk.std
family="nbinom1")
summary(ods.tt.zinb)
ggplot(quantity.rand, aes(n_spkrs_clip)) + geom_histogram()
sd(quantity.rand$n_spkrs_clip)^2)
sd(quantity.rand$n_spkrs_clip^2)
mean(quantity.rand$n_spkrs_clip)
sd(quantity.rand$n_spkrs_clip)^2
nspkrs.rand.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.rand,
family="poisson")
summary(nspkrs.rand.zinb)
nspkrs.rand.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
(1+I(stthr.std^2)|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.rand,
family="poisson")
summary(nspkrs.rand.zinb)
nspkrs.tt.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt,
family="poisson")
nspkrs.tt.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1+I(stthr.std^2)|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt,
family="poisson")
nspkrs.tt.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt,
family="poisson")
summary(nspkrs.tt.zinb)
nspkrs.rand.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
(1|aclew_child_id),
data=quantity.rand,
family="poisson")
summary(nspkrs.rand.zinb)
nspkrs.rand.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
(1+I(stthr.std^2)|aclew_child_id),
data=quantity.rand,
family="poisson")
#summary(nspkrs.rand.zinb)
summary(nspkrs.rand.zinb)
quantity.rand.sa.chi <- subset(quantity.rand.sa, SpkrAge == "Child")
nchispkrs.rand.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.rand.sa.chi,
family="poisson")
nchispkrs.rand.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1+I(stthr.std^2)|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.rand.sa.chi,
family="poisson")
summary(nchispkrs.rand.zinb)
quantity.nonrand.tt.sa.chi <- subset(quantity.nonrand.tt.sa, SpkrAge == "Child")
nchispkrs.tt.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt.sa.chi,
family="poisson")
nchispkrs.tt.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1+I(stthr.std^2)|aclew_child_id), # max: no cnvgnce w/ stthr slopes
data=quantity.nonrand.tt.sa.chi,
family="poisson")
nchispkrs.tt.zinb <- glmmTMB(n_spkrs_clip ~
tchiyr.std +
hsz.std +
I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:I(stthr.std^2) +
(1|aclew_child_id), #I(stthr.std^2)
data=quantity.nonrand.tt.sa.chi,
family="poisson")
summary(nchispkrs.tt.zinb)
prpchitcds.avgs.rand <- subset(quantity.rand.sa, SpkrAge == "Child") %>%
filter(!is.na(prop_sa.tds)) %>%
group_by(aclew_child_id) %>%
summarise(mean.chiprptcds = mean(prop_sa.tds),
median.chiprptcds = median(prop_sa.tds),
n.chitcdsclips = n())
prpchitcds.avgs.tt <- subset(quantity.nonrand.tt.sa, SpkrAge == "Child") %>%
filter(!is.na(prop_sa.tds)) %>%
group_by(aclew_child_id) %>%
summarise(mean.chiprptcds = mean(prop_sa.tds),
median.chiprptcds = median(prop_sa.tds),
n.chitcdsclips = n())
prpchitcds.rand.bin <- glmmTMB(chitcdsbin ~
tchiyr.std +
(1|aclew_child_id),
data=propchitcds.rand,
family="binomial")
qqnorm(residuals(prpchitcds.rand.bin))
qqline(residuals(prpchitcds.rand.bin))
summary(prpchitcds.rand.bin)
prpchitcds.tt.bin <- glmmTMB(chitcdsbin ~ tchiyr.std +
(1|aclew_child_id),
data=propchitcds.tt,
family="binomial")
summary(prpchitcds.tt.bin)
propchitcds.rand.corr_age <- propchitcds.rand %>%
group_by(aclew_child_id, tchiyr.std, age_mo_round) %>%
summarise(avg_prpchitcds = mean(prop_sa.tds))
cor.test(~ tchiyr.std + avg_prpchitcds,
data = propchitcds.rand.corr_age, method = "spearman")
propchitcds.tt.corr_age <- propchitcds.tt %>%
group_by(aclew_child_id, tchiyr.std, age_mo_round) %>%
summarise(avg_prpchitcds = mean(prop_sa.tds))
cor.test(~ tchiyr.std + avg_prpchitcds,
data = propchitcds.tt.corr_age, method = "spearman")
ggplot(turn.transitions.rand, aes(round(n.c_o.tpm,0))) + geom_histogram()
library(papaja)
library(ggplot2)
library(tidyverse)
library(viridis)
library(grid)
library(gridExtra)
library(ggpirate)
library(lme4)
library(glmmTMB)
library(bbmle)
source("0-Helper.R")
data.path <- "transcripts/anon/" # text files exported from ELAN
plot.path <- "plots/" # output plots
seg.index.file <- "Segment-order-inventory.csv"
ptcp.info.file <- "recording-info.csv"
comparison.file <- "comparison_studies.csv"
samplelabels <- c("High activity  ", "Random  ")
col.sample.bu <- list(
scale_fill_manual(labels=samplelabels, values=viridis(2)),
scale_color_manual(labels=samplelabels, values=viridis(2)))
col.sample.bu3 <- list(
scale_fill_manual(labels=samplelabels, values=viridis(3)),
scale_color_manual(labels=samplelabels, values=viridis(3)))
allowed.overlap <- 1000 #ms
allowed.gap <- 2000 #ms
# Read in annotation files
files <- list.files(path=data.path,pattern="*.txt")
all.data <- data.frame()
for (i in 1:length(files)) {
#  print(files[i])
newfile <- read_csv(paste0(data.path, files[i]), col_types = cols(val = col_character()))
newfile$aclew_child_id <- unlist(strsplit(files[i], '\\.'))[1]
all.data <- rbind(all.data, newfile)
}
all.data$row <- c(1:nrow(all.data))
# Read in supplementary data
ptcp.info <- read_csv(ptcp.info.file, col_types = cols()) %>%
dplyr::select(-row)
seg.info <- read_csv(seg.index.file)
# Extract and convert start time of each sample
seg.info$start.hhmmss <- regmatches(seg.info$Media,
regexpr("[[:digit:]]{6}", seg.info$Media))
seg.info$start.sec <- as.numeric(substr(seg.info$start.hhmmss,1,2))*60000 +
as.numeric(substr(seg.info$start.hhmmss,3,4))*1000 +
as.numeric(substr(seg.info$start.hhmmss,5,6))
seg.info$start.hr <- round(seg.info$start.sec/60000, 3)
seg.info$clipoffset.hhmmss <- regmatches(seg.info$Media,
regexpr("(?<=[[:digit:]]{6}_)[[:digit:]]{6}",
seg.info$Media, perl = TRUE))
seg.info$clipoffset.sec <- as.numeric(substr(seg.info$clipoffset.hhmmss,1,2))*60000 +
as.numeric(substr(seg.info$clipoffset.hhmmss,3,4))*1000 +
as.numeric(substr(seg.info$clipoffset.hhmmss,5,6))
seg.info$clipoffset.hr <- round(seg.info$clipoffset.sec/60000, 3)
# Add mean and sd values for participant-level predictors to ptcp.info
ptcp.info <- ptcp.info %>%
mutate(
tchiyr.m = mean(age_mo_round),
motyr.m = mean(mother_age),
nsb.m = mean(number_older_sibs),
hsz.m = mean(household_size),
tchiyr.sd = sd(age_mo_round),
motyr.sd = sd(mother_age),
nsb.sd = sd(number_older_sibs),
hsz.sd = sd(household_size)
)
# Merge in participant and segment info to the main data table
codes <- all.data %>% filter(tier == "code")
all.data <- all.data %>%
filter(speaker != "") %>%
left_join(ptcp.info, by = "aclew_child_id") %>%
mutate(segment = "", sample = "",
sample_type = "", segment_dur = 0)
for (i in 1:nrow(codes)) {
rec <- codes$aclew_child_id[i]
seg <- as.character(codes$val[i])
seg.on <- codes$start[i]
seg.off <- codes$stop[i]
seg.idx <- which(all.data$aclew_child_id == rec &
all.data$start < seg.off &
all.data$stop > seg.on)
all.data$segment[seg.idx] <- seg
}
# Label samples
all.data$sample[which(
grepl('^random', all.data$segment))] <- "random"
all.data$sample[which(
grepl('tt', all.data$segment))] <- "turn-taking"
all.data$sample[which(
grepl('va', all.data$segment))] <- "high-activity"
# Label sample types and durations
random.samples <- which(grepl('^random', all.data$segment))
all.data$sample_type[random.samples] <- "random"
all.data$segment_dur[random.samples] <- 5
ext.samples <- which(grepl('^extension', all.data$segment))
all.data$sample_type[ext.samples] <- "extension"
all.data$segment_dur[ext.samples] <- 5
tt.samples <- which(grepl('^tt', all.data$segment))
all.data$sample_type[tt.samples] <- "turn-taking"
all.data$segment_dur[tt.samples] <- 1
va.samples <- which(grepl('^va', all.data$segment))
all.data$sample_type[va.samples] <- "turn-taking"
all.data$segment_dur[va.samples] <- 1
# Add in segment start time
all.data <- all.data %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hhmmss",
"start.sec", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName"))
avg.utt.len.tseltal <- all.data %>%
filter(speaker != "CHI") %>%
dplyr::select(dur) %>%
summarise(mean.utt.len = mean(dur),
median.utt.len = median(dur))
ptcp.info <- mutate(ptcp.info,
rec.start.hr = lubridate::hour(start_of_recording) +
lubridate::minute(start_of_recording)/60 +
lubridate::second(start_of_recording)/3600,
rec.stop.hr = rec.start.hr + length_of_recording/3600) %>%
arrange(age_mo_round) %>%
mutate(order = seq(1:10))
used.clips <- seg.info %>%
filter(Include == 1) %>%
left_join(ptcp.info, by = c("aclew_id" = "aclew_child_id")) %>%
mutate(clip.dur = ifelse(grepl(('random'), CodeName), 5,
ifelse(grepl('extension', CodeName), 6, 1)),
sample.type = ifelse(grepl(('random'), CodeName), "Random",
ifelse(grepl('tt', CodeName), "Turn taking", "High activity")))
used.clips$sample.type = factor(used.clips$sample.type, levels = c("Random", "Turn taking", "High activity"))
clip.distribution <- ggplot() +
geom_segment(data = ptcp.info,
aes(x = rec.start.hr, y = order, xend = rec.stop.hr, yend = order)) +
geom_segment(data = used.clips,
aes(x = start.hr, y = order, xend = start.hr + clip.dur/60, yend = order,
color = sample.type), size = 3) +
theme_apa() +
scale_x_continuous(breaks = 7:21) +
scale_y_continuous(breaks = 1:10, labels = ptcp.info$age_mo_round) +
ylab("Child age (mo)") + xlab("Time of day (hr)") + labs(color = "Sample type") +
scale_color_manual(values = c("black", "red", "blue"))
clip.distribution
# Get min/hr speech measures
n.unique.rand.segs <- length(unique(all.data$segment[grepl("random", all.data$segment)]))
n.unique.recs <- length(unique(all.data$aclew_child_id))
all.rand.segments <- tibble(
aclew_child_id = rep(unique(all.data$aclew_child_id),
n.unique.rand.segs),
segment = rep(unique(all.data$segment[grepl("random", all.data$segment)]),
n.unique.recs))
# XDS
xds.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier)) %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(xds_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, xds_min = 0)) %>%
mutate(xds_mph = (xds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# ODS
ods.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & val != "T") %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(ods_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, ods_min = 0)) %>%
mutate(ods_mph = (ods_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# TDS
tds.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & val == "T") %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(tds_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, tds_min = 0)) %>%
mutate(tds_mph = (tds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# All CDS
cds.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, segment, segment_dur) %>%
summarise(cds_min = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(segment_dur = 5, cds_min = 0)) %>%
mutate(cds_mph = (cds_min/segment_dur)*60) %>%
arrange(aclew_child_id, segment)
# Number of speakers per clip
spkrs.per.seg.rand <- all.data %>%
filter(sample == "random" & speaker != "CHI" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.rand <- xds.per.seg.rand %>%
full_join(ods.per.seg.rand, by = c("aclew_child_id", "segment", "segment_dur")) %>%
full_join(tds.per.seg.rand, by = c("aclew_child_id", "segment", "segment_dur")) %>%
full_join(cds.per.seg.rand, by = c("aclew_child_id", "segment", "segment_dur")) %>%
full_join(spkrs.per.seg.rand, by = c("aclew_child_id", "segment")) %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
replace_na(list(xds_min = 0, xds_mph = 0,
tds_min = 0, tds_mph = 0,
cds_min = 0, cds_mph = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds = tds_min/xds_min)
# Don't replace NAs with 0s in this case; proportion is not meaningful w/o any speech
quantity.rand.bychild <- quantity.rand %>%
group_by(aclew_child_id) %>%
summarise(
xds_min = mean(xds_min),
xds_mph = mean(xds_mph),
ods_min = mean(ods_min),
ods_mph = mean(ods_mph),
tds_min = mean(tds_min),
tds_mph = mean(tds_mph),
cds_min = mean(cds_min),
cds_mph = mean(cds_mph),
prop_tds = mean(prop_tds, na.rm = TRUE),
m_n_spkrs = mean(n_spkrs_clip)) %>%
full_join(ptcp.info, by = "aclew_child_id")
# Get xds and tds min/hr by speaker type
all.data$SpkrAge <- "Not known"
all.data$SpkrAge[grepl("FA|MA|UA", all.data$speaker)] <- "Adult"
all.data$SpkrAge[grepl("FC|MC|UC", all.data$speaker)] <- "Child"
all.rand.segments.sa <- tibble(
aclew_child_id = rep(unique(all.data$aclew_child_id),
2*n.unique.rand.segs),
segment = rep(unique(all.data$segment[grepl("random", all.data$segment)]),
2*n.unique.recs),
SpkrAge = c(rep("Adult", (n.unique.rand.segs * n.unique.recs)),
rep("Child", (n.unique.rand.segs * n.unique.recs))))
# XDS
xds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier)) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(xds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, xds_min.sa = 0)) %>%
mutate(xds_mph.sa = (xds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# ODS
ods.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & val != "T") %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(ods_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, ods_min.sa = 0)) %>%
mutate(ods_mph.sa = (ods_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# TDS
tds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & val == "T") %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(tds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, tds_min.sa = 0)) %>%
mutate(tds_mph.sa = (tds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# All CDS
cds.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
grepl("xds@", tier) & (val == "T" | val == "C")) %>%
group_by(aclew_child_id, SpkrAge, segment, segment_dur) %>%
summarise(cds_min.sa = round(sum(dur)/60000,3)) %>%
full_join(all.rand.segments.sa, by = c("aclew_child_id", "segment", "SpkrAge")) %>%
replace_na(list(segment_dur = 5, cds_min.sa = 0)) %>%
mutate(cds_mph.sa = (cds_min.sa/segment_dur)*60) %>%
arrange(aclew_child_id, segment, SpkrAge)
# Number of speakers per clip
spkrs.per.seg.rand.sa <- all.data %>%
filter(sample == "random" & speaker != "CHI" & SpkrAge != "Not known" &
!(grepl("@", tier))) %>%
group_by(aclew_child_id, SpkrAge, segment) %>%
summarise(n_spkrs_clip = length(unique(speaker)))
# All together
quantity.rand.sa <- xds.per.seg.rand.sa %>%
full_join(ods.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(tds.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(cds.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge",
"segment", "segment_dur")) %>%
full_join(dplyr::select(quantity.rand, c("aclew_child_id", "segment", "tds_min")),
by = c("aclew_child_id", "segment")) %>%
full_join(spkrs.per.seg.rand.sa, by = c("aclew_child_id", "SpkrAge", "segment")) %>%
left_join(dplyr::select(seg.info, c("aclew_id", "CodeName", "start.hr")),
by = c("aclew_child_id" = "aclew_id", "segment" = "CodeName")) %>%
full_join(ptcp.info, by = "aclew_child_id") %>%
replace_na(list(xds_min.sa = 0, xds_mph.sa = 0,
ods_min.sa = 0, ods_mph.sa = 0,
tds_min.sa = 0, tds_mph.sa = 0,
cds_min.sa = 0, cds_mph.sa = 0,
n_spkrs_clip = 0)) %>%
mutate(prop_tds.sa = tds_min.sa/xds_min.sa,
prop_sa.tds = tds_min.sa/tds_min)
# Don't replace NAs with 0s in this case; proportion is not meaningful w/o any speech
# Get min/hr speech measures
all.nonrand.segments <- seg.info %>%
filter(!(grepl("random", CodeName))) %>%
select(aclew_id, CodeName) %>%
rename(aclew_child_id = aclew_id, segment = CodeName)
