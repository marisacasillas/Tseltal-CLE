#sd(round(turn.transitions.rand$n.c_o.tpm,0))^2
#mean(round(turn.transitions.rand$n.c_o.tpm,0))
# mean isn't much smaller than variance
# zero inflated
c_o.tpm.rand.zinb <- glmmTMB(round(n.c_o.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.rand,
ziformula=~tchiyr.std+I(stthr.std^2)+nsk.std,
family="nbinom1")
#res = simulateResiduals(c_o.tpm.rand.zinb)
#plot(res, rank = T)
#summary(c_o.tpm.rand.zinb)
#tchiyr.std                  0.8214     0.4774   1.721   0.0853 .
#nsk.std                    -0.3253     0.1779  -1.828   0.0675 .
#tchiyr.std:I(stthr.std^2)  -6.4614     2.5642  -2.520   0.0117 *
#tchiyr.std:nsk.std          0.4745     0.2248   2.110   0.0348 *
# ZI:
#I(stthr.std^2) -26.8775    15.6249  -1.720   0.0854 .
#nsk.std         -3.1740     1.8207  -1.743   0.0813 .
# save for reporting
c_o.tpm.rand.zinb.COEF.agetime <-
coef(summary(c_o.tpm.rand.zinb))[[1]]["tchiyr.std:I(stthr.std^2)",]
c_o.tpm.rand.zinb.COEF.agensk <-
coef(summary(c_o.tpm.rand.zinb))[[1]]["tchiyr.std:nsk.std",]
c_o.tpm.rand.zinb.COEF.ZItime <-
coef(summary(c_o.tpm.rand.zinb))[[2]]["I(stthr.std^2)",]
c_o.tpm.rand.zinb.COEF.ZInsk <-
coef(summary(c_o.tpm.rand.zinb))[[2]]["nsk.std",]
## CHI-OTH tts/min tt sample ####
#ggplot(turn.transitions.tt, aes(round(n.c_o.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.tt$n.c_o.tpm,0))^2
#mean(round(turn.transitions.tt$n.c_o.tpm,0))
# mean isn't much smaller than variance
# not zero-inflated (nature of sample)
c_o.tpm.tt.nb <- glmmTMB(round(n.c_o.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.tt,
family="nbinom1")
#res = simulateResiduals(c_o.tpm.tt.nb)
#plot(res, rank = T)
#summary(c_o.tpm.tt.nb)
#nsk.std                   -0.26254    0.11330  -2.317   0.0205 *
#tchiyr.std:I(stthr.std^2) -3.22865    1.58125  -2.042   0.0412 *
## OTH-CHI tts/min random sample ####
#ggplot(turn.transitions.rand, aes(round(n.o_c.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.rand$n.o_c.tpm,0))^2
#mean(round(turn.transitions.rand$n.o_c.tpm,0))
# mean isn't much smaller than variance
# zero-inflated
o_c.tpm.rand.zinb <- glmmTMB(round(n.o_c.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.rand,
ziformula=~tchiyr.std+I(stthr.std^2)+nsk.std,
family="nbinom1")
#res = simulateResiduals(o_c.tpm.rand.zinb)
#plot(res, rank = T)
#summary(o_c.tpm.rand.zinb)
#tchiyr.std                  0.9137     0.4955   1.844  0.06520 .
#tchiyr.std:I(stthr.std^2)  -7.2977     2.6100  -2.796  0.00517 **
# ZI:
#I(stthr.std^2) -23.7206    13.7559  -1.724   0.0846 .
# save for reporting
o_c.tpm.rand.zinb.COEF.agetime <-
coef(summary(o_c.tpm.rand.zinb))[[1]]["tchiyr.std:I(stthr.std^2)",]
## OTH-CHI tts/min tt sample ####
#ggplot(turn.transitions.tt, aes(round(n.o_c.tpm,0))) + geom_histogram()
#sd(round(turn.transitions.tt$n.o_c.tpm,0))^2
#mean(round(turn.transitions.tt$n.o_c.tpm,0))
# mean is much smaller than variance
# not really zero-inflated
o_c.tpm.tt.nb <- glmmTMB(round(n.o_c.tpm,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.transitions.tt,
family="nbinom1")
#res = simulateResiduals(o_c.tpm.tt.nb)
#plot(res, rank = T)
#summary(o_c.tpm.tt.nb)
#nsk.std                   -0.26295    0.11984  -2.194   0.0282 *
#tchiyr.std:I(stthr.std^2) -3.06715    1.68891  -1.816   0.0694 .
# save for reporting
o_c.tpm.tt.nb.COEF.nsk <-
coef(summary(o_c.tpm.tt.nb))[[1]]["nsk.std",]
## Sequence duration random sample ####
#ggplot(turn.sequences.rand, aes(round((seq.dur*60),0))) + geom_histogram()
#sd(round((turn.sequences.rand$seq.dur*60),0))^2
#mean(round((turn.sequences.rand$seq.dur*60),0))
# mean is much smaller than variance
# non-zero values
turn.sequences.rand$uniq.segment <- paste0(turn.sequences.rand$aclew_child_id, "-",
turn.sequences.rand$segment)
seqdur.sec.rand.nb <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1|aclew_child_id), #I(stthr.std^2)
data=turn.sequences.rand,
family="nbinom1")
#res = simulateResiduals(seqdur.sec.rand.nb)
#plot(res, rank = T)
#summary(seqdur.sec.rand.nb) # (no significant effects)
#tchiyr.std:hsz.std         0.18889    0.11012   1.715    0.0863 .
# save for reporting
seqdur.sec.rand.nb.COEF.agehsz <-
coef(summary(seqdur.sec.rand.nb))[[1]]["tchiyr.std:hsz.std",]
## Sequence duration tt sample ####
#ggplot(turn.sequences.tt, aes(round((seq.dur*60),0))) + geom_histogram()
#sd(round((turn.sequences.tt$seq.dur*60),0))^2
#mean(round((turn.sequences.tt$seq.dur*60),0))
# mean is much smaller than variance
# non-zero values
turn.sequences.tt$uniq.segment <- paste0(turn.sequences.tt$aclew_child_id, "-",
turn.sequences.tt$segment)
seqdur.sec.tt.nb <- glmmTMB(round((seq.dur*60),0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:I(stthr.std^2) +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1|uniq.segment) +
(1+I(stthr.std^2)|aclew_child_id),
data=turn.sequences.tt,
family="nbinom1")
#res = simulateResiduals(seqdur.sec.tt.nb)
#plot(res, rank = T)
#summary(seqdur.sec.tt.nb)
#tchiyr.std                -0.242902   0.100557  -2.416   0.0157 *
#I(stthr.std^2)             2.764077   1.107589   2.496   0.0126 *
#hsz.std                   -0.213677   0.095170  -2.245   0.0248 *
#tchiyr.std:hsz.std        -0.205633   0.117426  -1.751   0.0799 .
# save for reporting
seqdur.sec.tt.nb.COEF.age <-
coef(summary(seqdur.sec.tt.nb))[[1]]["tchiyr.std",]
seqdur.sec.tt.nb.COEF.time <-
coef(summary(seqdur.sec.tt.nb))[[1]]["I(stthr.std^2)",]
seqdur.sec.tt.nb.COEF.hsz <-
coef(summary(seqdur.sec.tt.nb))[[1]]["hsz.std",]
# get average overall turn transition rate
ttrate.all.avg.bychild <- turn.transitions %>%
filter(grepl("tt", segment)) %>%
replace_na(list(tm1.tier = 0, tp1.tier = 0)) %>%
mutate(tm1.bin = ifelse(tm1.tier == 0, 0, 1),
tp1.bin = ifelse(tp1.tier == 0, 0, 1)) %>%
group_by(aclew_child_id, segment) %>%
summarise(oct.raw = sum(tm1.bin), cot.raw = sum(tp1.bin)) %>%
mutate(segdur = ifelse(grepl('ext', segment), 5, 1)) %>%
group_by(aclew_child_id) %>%
summarise (alltts = sum(oct.raw + cot.raw), sampledur = sum(segdur)) %>%
mutate(peakttrate = alltts/sampledur)
ttrate.all.avg <- mean(ttrate.all.avg.bychild$peakttrate)
# set up a table of tt onset times within the randomly sampled segments
tts.all.rand <- turn.transitions %>%
filter(grepl("rand", segment)) %>%
select(aclew_child_id, segment, tm1.stop, tp1.start)
rand.seg.starts <- seg.info %>%
filter(grepl("rand", CodeName)) %>%
select(aclew_id, CodeName, clipoffset.sec)
rand.seg.secs <- tibble()
for (i in 1:nrow(rand.seg.starts)) {
seg.secs <- tibble(
aclew_child_id = rand.seg.starts$aclew_id[i],
segment = rand.seg.starts$CodeName[i],
segoffset.sec = c(0:299), # seconds in a (5-min) random clip
segtime.sec = seq(rand.seg.starts$clipoffset.sec[i],
(rand.seg.starts$clipoffset.sec[i] + 299), 1),
bin.tt = 0
)
tts.all.rand.chi <- tts.all.rand %>%
filter(aclew_child_id == rand.seg.starts$aclew_id[i],
segment == rand.seg.starts$CodeName[i])
# add in tm1s
tts.all.rand.chi.tm1 <- tts.all.rand.chi$tm1.stop[!is.na(tts.all.rand.chi$tm1.stop)]
if (length(tts.all.rand.chi.tm1) > 0) {
tm1.onsets.sec <- tts.all.rand.chi.tm1/1000
# REMINDER: example use of findInterval:
# findInterval(c(2,5,7,8), c(4,5,6,8,9,10)) => [1] 0 2 3 4
tt.idx <- findInterval(tm1.onsets.sec, seg.secs$segtime.sec)
seg.secs$bin.tt[tt.idx] <- seg.secs$bin.tt[tt.idx] + 1
}
# add in tp1s
tts.all.rand.chi.tp1 <- tts.all.rand.chi$tp1.start[!is.na(tts.all.rand.chi$tp1.start)]
if (length(tts.all.rand.chi.tp1) > 0) {
tp1.onsets.sec <- tts.all.rand.chi.tp1/1000
tt.idx <- findInterval(tp1.onsets.sec, seg.secs$segtime.sec)
seg.secs$bin.tt[tt.idx] <- seg.secs$bin.tt[tt.idx] + 1
}
rand.seg.secs <- bind_rows(rand.seg.secs, seg.secs)
}
# get average tt rates in 1-min windows
rand.window.tts <- rand.seg.secs %>%
filter(segoffset.sec >= 59) %>%
select(-bin.tt) %>%
mutate(ttr.min = 0)
for (chi in unique(rand.seg.secs$aclew_child_id)) {
for (seg in unique(rand.seg.secs$segment)) {
for (minstart in c(1:241)) {
rand.window.tts$ttr.min[which(rand.window.tts$aclew_child_id == chi &
rand.window.tts$segment == seg &
rand.window.tts$segoffset.sec == minstart+59-1)] <-
sum(subset(rand.seg.secs, aclew_child_id == chi &
segment == seg)$bin.tt[(minstart:(minstart+59))])
}
}
}
rand.window.tts <- rand.window.tts %>%
left_join(select(ttrate.all.avg.bychild, c(aclew_child_id, peakttrate))) %>%
mutate(GE.chipeak = ifelse(ttr.min >= peakttrate, 1, 0),
GE.allpeak = ifelse(ttr.min >= ttrate.all.avg, 1, 0))
write_csv(rand.window.tts, "ttr.random.1minwindow.csv")
# calculate # seconds in "peak" tt rates and duration of peaks
ttrGEpeak.segs <- rand.window.tts %>%
filter(GE.allpeak == 1)
ttrGEpeak.segs$prevpeak <- c(-1, ttrGEpeak.segs$segoffset.sec[1:nrow(ttrGEpeak.segs)-1])
ttrGEpeak.segs$newstreak <- ifelse(ttrGEpeak.segs$prevpeak ==
(ttrGEpeak.segs$segoffset.sec - 1), 0, 1)
ttrGEpeak.segs <- select(ttrGEpeak.segs, -prevpeak)
ttrGEpeaks <- filter(ttrGEpeak.segs, newstreak == 1)
ttrGEpeaks$end.sec <- 0
for (i in 1:nrow(ttrGEpeaks)) {
chi <- ttrGEpeaks$aclew_child_id[i]
seg <- ttrGEpeaks$segment[i]
start <- ttrGEpeaks$segoffset.sec[i]
start.idx <- which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec == start)
newstreaks <- which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec > start &
ttrGEpeak.segs$newstreak == 1)
if (length(newstreaks) > 0) {
end.sec <- ttrGEpeak.segs$segoffset.sec[newstreaks[1] - 1]
} else {
end.sec <- ttrGEpeak.segs$segoffset.sec[max(
which(ttrGEpeak.segs$aclew_child_id == chi &
ttrGEpeak.segs$segment == seg &
ttrGEpeak.segs$segoffset.sec >= start))]
}
ttrGEpeaks$end.sec[i] <- end.sec + 1
}
ttrGEpeaks <- ttrGEpeaks %>%
mutate(start.sec = segoffset.sec - 59,
peak.dur = end.sec - start.sec)
ttrGEpeaks.summary <- ttrGEpeaks %>%
group_by(aclew_child_id) %>%
summarise(npeaks = n(),
pkdur.mean = mean(peak.dur),
pkdur.sum = sum(peak.dur),
pkdur.mph = ((pkdur.sum/60)/45) * 60) %>% # (peak mins/45 poss mins) * 60 for min/hr
# add back zero estimates for children with no tt peaks in the random data
full_join(select(ptcp.info, aclew_child_id)) %>%
replace_na(list(npeaks = 0, pkdur.mean = 0, pkdur.sum = 0, pkdur.mph = 0))
ttrGEpeak.segs.chi <- rand.window.tts %>%
filter(GE.chipeak == 1)
avg.random.peak.durs <- ttrGEpeaks %>%
group_by(aclew_child_id) %>%
summarise(meandur = mean(peak.dur),
meddur = median(peak.dur))
rand.window.tts <- rand.window.tts %>%
mutate(endoffsetsec = segoffset.sec + 1,
delta.allpeak = ttr.min - ttrate.all.avg) %>%
left_join(ptcp.info)
ttr.random <- ggplot(rand.window.tts,
aes(x = as.factor(age_mo_round), y = ttr.min)) +
geom_jitter(color = "gray80", size = 0.3) +
geom_violin(color = "black", fill = "black") +
ylab("High-tt secs/min") + xlab("Age (months)")	+
scale_y_continuous(limits=c(-1, round(max(rand.window.tts$ttr.min) + 5, -1)),
breaks=seq(0, round(max(rand.window.tts$ttr.min) + 5, -1), 10)) +
coord_cartesian(ylim=c(0, round(max(rand.window.tts$ttr.min) + 5, -1))) +
geom_hline(yintercept = ttrate.all.avg, color = "red") +
geom_point(color = "red", size = 2.5, aes(y = peakttrate)) +
#  scale_color_manual(values = viridis(3)) +
#  scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="none",
axis.line = element_line(color="black", size = 0.4))
# all vocalization types
chi.vm.lx.utts <- all.data %>%
filter((tier == "vcm@CHI" | tier == "lex@CHI" | tier == "mwu@CHI") & !is.na(val)) %>%
mutate(voc.rating = ifelse(val == "M", 4,
ifelse((val == "1" | val == "W"), 3,
ifelse((val == "0" | val == "C"), 2,
ifelse(val == "N", 1, 0))))) %>%
filter(voc.rating > 0) %>%
group_by(aclew_child_id, segment, sample, start) %>%
summarise(max_voc.rtg = max(voc.rating))
all.voc.types.per.child <- tibble(
aclew_child_id = rep(ptcp.info$aclew_child_id, 4),
max_voc.rtg = c(rep(1, length(ptcp.info$aclew_child_id)), rep(2, length(ptcp.info$aclew_child_id)),
rep(3, length(ptcp.info$aclew_child_id)), rep(4, length(ptcp.info$aclew_child_id)))
)
chi.nvocs <- chi.vm.lx.utts %>%
group_by(aclew_child_id) %>%
summarise(n_vocs = n())
chi.vm.lx.voc.type.props <- chi.vm.lx.utts %>%
group_by(aclew_child_id, max_voc.rtg) %>%
summarise(n_voc.type = n()) %>%
full_join(all.voc.types.per.child, by = c("aclew_child_id", "max_voc.rtg")) %>%
replace_na(list(n_voc.type = 0)) %>%
full_join(chi.nvocs, by = "aclew_child_id") %>%
mutate(prop_voc.type = round(n_voc.type/n_vocs, 3)) %>%
arrange(aclew_child_id, max_voc.rtg) %>%
full_join(ptcp.info, by = "aclew_child_id")
# speech-like vs. non-speech-like only, only under 19mo
chi.vm.lx.utts.all <- all.data %>%
filter((tier == "vcm@CHI" | tier == "lex@CHI" | tier == "mwu@CHI") & !is.na(val) & age_mo_round < 19) %>%
mutate(voc.rating = ifelse(val == "M", 1,
ifelse((val == "1" | val == "W"), 1,
ifelse((val == "0" | val == "C"), 1, 0)))) %>%
group_by(aclew_child_id, segment, sample, start) %>%
summarise(max_voc.rtg = max(voc.rating))
all.voc.types.per.child.all <- tibble(
aclew_child_id = rep(ptcp.info$aclew_child_id, 2),
max_voc.rtg = c(rep(0, length(ptcp.info$aclew_child_id)),
rep(1, length(ptcp.info$aclew_child_id)))
)
chi.nvocs.all <- chi.vm.lx.utts.all %>%
group_by(aclew_child_id) %>%
summarise(n_vocs = n())
chi.vm.lx.voc.type.props.bin <- chi.vm.lx.utts.all %>%
group_by(aclew_child_id, max_voc.rtg) %>%
summarise(n_voc.type = n()) %>%
left_join(all.voc.types.per.child.all, by = c("aclew_child_id", "max_voc.rtg")) %>%
replace_na(list(n_voc.type = 0)) %>%
left_join(chi.nvocs.all, by = "aclew_child_id") %>%
mutate(prop_voc.type = round(n_voc.type/n_vocs, 3)) %>%
arrange(aclew_child_id, max_voc.rtg) %>%
left_join(ptcp.info, by = "aclew_child_id")
chi.vm.lx.voc.type.props <- chi.vm.lx.voc.type.props %>%
mutate(voc.type = factor(as.factor(max_voc.rtg), labels = c("NCB", "CB", "SW", "MW")))
voc.mat.by.age <- ggplot(
data = chi.vm.lx.voc.type.props,
aes(x = age_mo_round, y = prop_voc.type, group = as.factor(voc.type))) +
geom_point(aes(color = as.factor(voc.type))) +
geom_smooth(aes(color = as.factor(voc.type), fill = as.factor(voc.type)), method = "loess") +
ylab("Prop of linguistic vocs") + xlab("Child age (mo)") +
labs(fill='Voc type') +
labs(color='Voc type') +
scale_y_continuous(limits=c(-0.5,1.5),
breaks=seq(0,1,0.2)) +
scale_x_continuous(limits=c(0,38),
breaks=seq(0,38,6)) +
coord_cartesian(ylim=c(0,1), xlim=c(0,38)) +
theme_apa() + theme(
legend.position = c(0.9, 0.85),
legend.background = element_rect(fill="transparent"),
axis.line = element_line(color="black", size = 0.4))
tod.tcds <- ggplot(data = quantity.rand_and_tt.all) +
geom_point(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = start.hr, color = Sample,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
#  geom_smooth(data = quantity.rand_and_tt.all,
#              aes(y = round(tds_mph,0), x = start.hr, color = Sample, fill = Sample,
#                  group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
#              method = "lm", formula = y ~ poly(x, 2)) +
facet_grid(~ as.factor(ifelse(age_mo_round < 13, "<13mo", "13+mo"))) +
ylab("TCDS (min/hr)") + xlab("Time of day (hour)")	+
scale_y_continuous(limits=c(-10,40),
breaks=c(0,10,20, 30, 40)) +
scale_x_continuous(limits=c(8,18),
breaks=seq(8,18,2)) +
coord_cartesian(ylim=c(0,40),xlim=c(8,18)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="right",
axis.line = element_line(color="black", size = 0.4))
tod.tcds
summary(tds.rand.zinb)
head(quantity.rand)
head(quantity.rand$age_mo_round)
quantity.rand.young <- subset(quantity.rand, age_mo_round <= 13)
quantity.rand.older <- subset(quantity.rand, age_mo_round > 13)
nrow(quantity.rand.young)
nrow(quantity.rand.older)
tds.rand.zinb.y <- glmmTMB(round(tds_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1+I(stthr.std^2)|aclew_child_id),
data=quantity.rand.young,
ziformula=~tchiyr.std,#nsk.std,I(stthr.std^2)
family="nbinom1")
summary(tds.rand.zinb.y)
tds.rand.zinb.o <- glmmTMB(round(tds_mph,0) ~
tchiyr.std +
I(stthr.std^2) +
hsz.std +
nsk.std +
tchiyr.std:hsz.std +
tchiyr.std:nsk.std +
(1+I(stthr.std^2)|aclew_child_id),
data=quantity.rand.older,
ziformula=~tchiyr.std,#nsk.std,I(stthr.std^2)
family="nbinom1")
summary(tds.rand.zinb.o)
tod.tcds <- ggplot(data = quantity.rand_and_tt.all) +
geom_point(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = start.hr, color = aclew_child_id,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
#  geom_smooth(data = quantity.rand_and_tt.all,
#              aes(y = round(tds_mph,0), x = start.hr, color = Sample, fill = Sample,
#                  group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
#              method = "lm", formula = y ~ poly(x, 2)) +
facet_grid(~ as.factor(ifelse(age_mo_round < 13, "<13mo", "13+mo"))) +
ylab("TCDS (min/hr)") + xlab("Time of day (hour)")	+
scale_y_continuous(limits=c(-10,40),
breaks=c(0,10,20, 30, 40)) +
scale_x_continuous(limits=c(8,18),
breaks=seq(8,18,2)) +
coord_cartesian(ylim=c(0,40),xlim=c(8,18)) +
scale_color_manual(values = viridis(3)) +
scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="right",
axis.line = element_line(color="black", size = 0.4))
tod.tcds
quantity.nonrand.tt$Sample <- "Turn taking"
quantity.rand$Sample <- "Random"
quantity.rand_and_tt.all <- bind_rows(quantity.nonrand.tt, quantity.rand)
tod.tcds <- ggplot(data = quantity.rand_and_tt.all) +
geom_point(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = start.hr, color = aclew_child_id,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
#  geom_smooth(data = quantity.rand_and_tt.all,
#              aes(y = round(tds_mph,0), x = start.hr, color = Sample, fill = Sample,
#                  group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
#              method = "lm", formula = y ~ poly(x, 2)) +
facet_grid(~ as.factor(ifelse(age_mo_round < 13, "<13mo", "13+mo"))) +
ylab("TCDS (min/hr)") + xlab("Time of day (hour)")	+
scale_y_continuous(limits=c(-10,40),
breaks=c(0,10,20, 30, 40)) +
scale_x_continuous(limits=c(8,18),
breaks=seq(8,18,2)) +
coord_cartesian(ylim=c(0,40),xlim=c(8,18)) +
#  scale_color_manual(values = viridis(3)) +
#  scale_fill_manual(values = viridis(3)) +
theme_apa() +
theme(legend.position="right",
axis.line = element_line(color="black", size = 0.4))
tod.tcds
tod.tcds
ggplot(data = quantity.rand_and_tt.all) +
geom_point(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = I(stthr.std^2), color = aclew_child_id,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
geom_smooth(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = I(stthr.std^2), color = Sample, fill = Sample,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
method = "lm") +
#  geom_point(data = quantity.rand_and_tt.all,
#             aes(y = round(tds_mph,0), x = start.hr, color = aclew_child_id,
#                 group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
#  geom_smooth(data = quantity.rand_and_tt.all,
#              aes(y = round(tds_mph,0), x = start.hr, color = Sample, fill = Sample,
#                  group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
#              method = "lm", formula = y ~ poly(x, 2)) +
facet_grid(~ as.factor(ifelse(age_mo_round < 13, "<13mo", "13+mo")))
tod.tcds <- ggplot(data = quantity.rand_and_tt.all) +
geom_point(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = I(stthr.std^2), color = aclew_child_id,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
geom_smooth(data = quantity.rand_and_tt.all,
aes(y = round(tds_mph,0), x = I(stthr.std^2), color = Sample, fill = Sample,
group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
method = "lm") +
#  geom_point(data = quantity.rand_and_tt.all,
#             aes(y = round(tds_mph,0), x = start.hr, color = aclew_child_id,
#                 group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample))) +
#  geom_smooth(data = quantity.rand_and_tt.all,
#              aes(y = round(tds_mph,0), x = start.hr, color = Sample, fill = Sample,
#                  group = interaction(as.factor(ifelse(age_mo_round < 13, -1, 1)), Sample)),
#              method = "lm", formula = y ~ poly(x, 2)) +
facet_grid(~ as.factor(ifelse(age_mo_round < 13, "<13mo", "13+mo")))
tod.tcds
