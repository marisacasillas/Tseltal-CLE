t.plus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T"|subdata$val == "C") &
subdata$start >= tp1.start &
subdata$start <= tp1.stop)
# Find OTH-CHI transitions
tm1.start <- c_utt$start[j] - allowed.gap
tm1.stop <- tm1.start + allowed.gap + allowed.overlap
t.minus1 <- which(subdata$speaker != "CHI" &
(subdata$val == "T"|subdata$val == "C") &
subdata$stop <= tm1.stop &
subdata$stop >= tm1.start)
if(length(t.plus1) > 0) {
tp1.match <- 0
for (turn in t.plus1) {
if (!(turn %in% used.tp1s) & tp1.match == 0) {
used.tp1s <- c(used.tp1s, turn)
chi.turn.info$tp1.tier[j] <- subdata$tier[turn]
chi.turn.info$tp1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tp1.start[j] <- subdata$start[turn]
chi.turn.info$tp1.stop[j] <- subdata$stop[turn]
chi.turn.info$tp1.val[j] <- subdata$val[turn]
tp1.match <- 1
}
}
}
if(length(t.minus1) > 0) {
tm1.match <- 0
for (turn in t.minus1) {
if (!(turn %in% used.tm1s) & tm1.match == 0) {
used.tm1s <- c(used.tm1s, turn)
chi.turn.info$tm1.tier[j] <- subdata$tier[turn]
chi.turn.info$tm1.speaker[j] <- subdata$speaker[turn]
chi.turn.info$tm1.start[j] <- subdata$start[turn]
chi.turn.info$tm1.stop[j] <- subdata$stop[turn]
chi.turn.info$tm1.val[j] <- subdata$val[turn]
tm1.match <- 1
}
}
}
}
turn.transitions <- bind_rows(turn.transitions, chi.turn.info)
}
turn.transitions <- turn.transitions %>%
filter(!(is.na(tier)))
turn.transitions.overview.o_c <- turn.transitions %>%
group_by(aclew_child_id, segment, tm1.val) %>%
summarise(n.o_c.tts = n()) %>%
rename(oth.spkr = tm1.val) %>%
replace_na(list(oth.spkr = "O"))
turn.transitions.overview.c_o <- turn.transitions %>%
group_by(aclew_child_id, segment, tp1.val) %>%
summarise(n.c_o.tts = n()) %>%
rename(oth.spkr = tp1.val) %>%
replace_na(list(oth.spkr = "O"))
all.tt.combos <-  all.segments %>%
rbind(all.segments) %>%
rbind(all.segments) %>%
mutate(oth.spkr = c(rep("T", nrow(all.segments)),
rep("C", nrow(all.segments)),
rep("O", nrow(all.segments))),
duration = ifelse(grepl('extension', sample_type), 5,
ifelse(grepl('random', sample_type), 5, 1))) %>%
arrange(aclew_child_id, segment, oth.spkr) %>%
full_join(turn.transitions.overview.o_c,
by = c("aclew_child_id", "segment", "oth.spkr")) %>%
full_join(turn.transitions.overview.c_o,
by = c("aclew_child_id", "segment", "oth.spkr")) %>%
replace_na(list(n.o_c.tts = 0, n.c_o.tts = 0)) %>%
arrange(aclew_child_id, segment, oth.spkr)
tth.per.sample.tds <- all.tt.combos %>%
filter(oth.spkr == "T") %>%
group_by(aclew_child_id, sample) %>%
summarise(dur.sample = sum(duration),
S.o_c.tth.tds = sum(n.o_c.tts),
S.c_o.tth.tds = sum(n.c_o.tts)) %>%
mutate(o_c.tth.tds = (S.o_c.tth.tds/dur.sample)*60,
c_o.tth.tds = (S.c_o.tth.tds/dur.sample)*60)
tth.per.sample.cds <- all.tt.combos %>%
filter(oth.spkr == "T" | oth.spkr == "C") %>%
group_by(aclew_child_id, segment, sample, duration) %>%
summarise(n_o_c.tts.TC = sum(n.o_c.tts),
n_c_o.tts.TC = sum(n.c_o.tts)) %>%
ungroup() %>%
group_by(aclew_child_id, sample) %>%
summarise(dur.sample = sum(duration),
S.o_c.tth.cds = sum(n_o_c.tts.TC),
S.c_o.tth.cds = sum(n_c_o.tts.TC)) %>%
mutate(o_c.tth.cds = (S.o_c.tth.cds/dur.sample)*60,
c_o.tth.cds = (S.c_o.tth.cds/dur.sample)*60)
tth.per.sample <- tth.per.sample.tds %>%
select(-dur.sample) %>%
full_join(tth.per.sample.cds, by = c("aclew_child_id", "sample")) %>%
arrange(aclew_child_id, sample) %>%
mutate(d_o_c.tth.tds = 0,
d_c_o.tth.tds = 0,
d_o_c.tth.cds = 0,
d_c_o.tth.cds = 0)
deltas.random.v.tt.tth <- tth.per.sample %>%
filter(sample != "high-activity")
for (i in 2:nrow(deltas.random.v.tt.tth)) {
deltas.random.v.tt.tth$d_o_c.tth.tds[i] <-
deltas.random.v.tt.tth$o_c.tth.tds[i] -
deltas.random.v.tt.tth$o_c.tth.tds[i-1] # set up for tt - random
deltas.random.v.tt.tth$d_c_o.tth.tds[i] <-
deltas.random.v.tt.tth$c_o.tth.tds[i] - deltas.random.v.tt.tth$c_o.tth.tds[i-1]
deltas.random.v.tt.tth$d_o_c.tth.cds[i] <-
deltas.random.v.tt.tth$o_c.tth.cds[i] -
deltas.random.v.tt.tth$o_c.tth.cds[i-1]
deltas.random.v.tt.tth$d_c_o.tth.cds[i] <-
deltas.random.v.tt.tth$c_o.tth.cds[i] - deltas.random.v.tt.tth$c_o.tth.cds[i-1]
}
deltas.random.v.tt.tth <- deltas.random.v.tt.tth %>%
filter(sample != "random") %>% # only keep meaningful vals
ungroup() %>%
select(aclew_child_id, d_o_c.tth.tds, d_c_o.tth.tds, d_o_c.tth.cds, d_c_o.tth.cds) %>%
mutate(delta = "tt-random")
deltas.random.v.ha.tth <- tth.per.sample %>%
filter(sample != "turn-taking")
for (i in 2:nrow(deltas.random.v.ha.tth)) {
deltas.random.v.ha.tth$d_o_c.tth.tds[i] <-
deltas.random.v.ha.tth$o_c.tth.tds[i-1] -
deltas.random.v.ha.tth$o_c.tth.tds[i] # set up for ha - random
deltas.random.v.ha.tth$d_c_o.tth.tds[i] <-
deltas.random.v.ha.tth$c_o.tth.tds[i-1] - deltas.random.v.ha.tth$c_o.tth.tds[i]
deltas.random.v.ha.tth$d_o_c.tth.cds[i] <-
deltas.random.v.ha.tth$o_c.tth.cds[i-1] -
deltas.random.v.ha.tth$o_c.tth.cds[i]
deltas.random.v.ha.tth$d_c_o.tth.cds[i] <-
deltas.random.v.ha.tth$c_o.tth.cds[i-1] - deltas.random.v.ha.tth$c_o.tth.cds[i]
}
deltas.random.v.ha.tth <- deltas.random.v.ha.tth %>%
filter(sample == "random") %>% # only keep meaningful vals
ungroup() %>%
select(aclew_child_id, d_o_c.tth.tds, d_c_o.tth.tds, d_o_c.tth.cds, d_c_o.tth.cds) %>%
mutate(delta = "va-random")
deltas.random.v.oth.tth <- deltas.random.v.tt.tth %>%
bind_rows(deltas.random.v.ha.tth) %>%
full_join(ptcp.info, by = "aclew_child_id")
# CHIVOC mph and uph
chi.voc <- all.data %>%
filter(tier == "CHI") %>%
group_by(aclew_child_id, segment) %>%
summarise(n_utts = n(),
dur.utts = round(sum(dur)/60000,3)) %>%
full_join(all.segments, by = c("aclew_child_id", "segment")) %>%
replace_na(list(n_utts = 0, dur.utts = 0)) %>%
mutate(duration = ifelse(grepl('extension', segment), 5,
ifelse(grepl('random', segment), 5, 1)))
chi.voc.per.sample <- chi.voc %>%
group_by(aclew_child_id, sample) %>%
summarise(S_n_utts = sum(n_utts),
S_dur.utts = sum(dur.utts),
S_duration = sum(duration)) %>%
mutate(cvc_uph = (S_n_utts/S_duration)*60,
cvc_mph = (S_dur.utts/S_duration)*60) %>%
select(-S_n_utts, -S_dur.utts, -S_duration) %>%
arrange(aclew_child_id, sample) %>%
mutate(d_cvc_uph = 0,
d_cvc_mph = 0)
deltas.random.v.tt.cvc <- chi.voc.per.sample %>%
filter(sample != "high-activity")
for (i in 2:nrow(deltas.random.v.tt.cvc)) {
deltas.random.v.tt.cvc$d_cvc_uph[i] <-
deltas.random.v.tt.cvc$cvc_uph[i] -
deltas.random.v.tt.cvc$cvc_uph[i-1] # set up for tt - random
deltas.random.v.tt.cvc$d_cvc_mph[i] <-
deltas.random.v.tt.cvc$cvc_mph[i] - deltas.random.v.tt.cvc$cvc_mph[i-1]
}
deltas.random.v.tt.cvc <- deltas.random.v.tt.cvc %>%
filter(sample != "random") %>% # only keep meaningful vals
ungroup() %>%
select(aclew_child_id, d_cvc_uph, d_cvc_mph) %>%
mutate(delta = "tt-random")
deltas.random.v.ha.cvc <- chi.voc.per.sample %>%
filter(sample != "turn-taking")
for (i in 2:nrow(deltas.random.v.ha.cvc)) {
deltas.random.v.ha.cvc$d_cvc_uph[i] <-
deltas.random.v.ha.cvc$cvc_uph[i-1] -
deltas.random.v.ha.cvc$cvc_uph[i] # set up for ha - random
deltas.random.v.ha.cvc$d_cvc_mph[i] <-
deltas.random.v.ha.cvc$cvc_mph[i-1] - deltas.random.v.ha.cvc$cvc_mph[i]
}
deltas.random.v.ha.cvc <- deltas.random.v.ha.cvc %>%
filter(sample == "random") %>% # only keep meaningful vals
ungroup() %>%
select(aclew_child_id, d_cvc_uph, d_cvc_mph) %>%
mutate(delta = "va-random")
deltas.random.v.oth.cvc <- deltas.random.v.tt.cvc %>%
bind_rows(deltas.random.v.ha.cvc) %>%
full_join(ptcp.info, by = "aclew_child_id")
# CHIVM
chi.vm.lx.per.segment <- chi.vm.lx.utts %>%
group_by(aclew_child_id, sample, segment) %>%
summarise(n_vocs = n(),
m_voc.rtg = mean(max_voc.rtg),
md_voc.rtg = median(max_voc.rtg),
sd_voc.rtg = sd(max_voc.rtg)) %>%
full_join(ptcp.info, by = c("aclew_child_id"))
chi.vm.lx.per.sample <- chi.vm.lx.per.segment %>%
group_by(aclew_child_id, sample) %>%
summarise(voc_rtg = mean(m_voc.rtg)) %>%
arrange(aclew_child_id, sample) %>%
mutate(d_voc_rtg = 0)
deltas.random.v.tt.vrt <- chi.vm.lx.per.sample %>%
filter(sample != "high-activity")
for (i in 2:nrow(deltas.random.v.tt.vrt)) {
deltas.random.v.tt.vrt$d_voc_rtg[i] <-
deltas.random.v.tt.vrt$voc_rtg[i] -
deltas.random.v.tt.vrt$voc_rtg[i-1] # set up for tt - random
}
deltas.random.v.tt.vrt <- deltas.random.v.tt.vrt %>%
filter(sample != "random") %>% # only keep meaningful vals
ungroup() %>%
select(aclew_child_id, d_voc_rtg) %>%
mutate(delta = "tt-random")
deltas.random.v.ha.vrt <- chi.vm.lx.per.sample %>%
filter(sample != "turn-taking")
for (i in 2:nrow(deltas.random.v.ha.vrt)) {
deltas.random.v.ha.vrt$d_voc_rtg[i] <-
deltas.random.v.ha.vrt$voc_rtg[i-1] -
deltas.random.v.ha.vrt$voc_rtg[i] # set up for ha - random
}
deltas.random.v.ha.vrt <- deltas.random.v.ha.vrt %>%
filter(sample == "random") %>% # only keep meaningful vals
ungroup() %>%
select(aclew_child_id, d_voc_rtg) %>%
mutate(delta = "va-random")
deltas.random.v.oth.vrt <- deltas.random.v.tt.vrt %>%
bind_rows(deltas.random.v.ha.vrt) %>%
full_join(ptcp.info, by = "aclew_child_id")
# XDS/TDS/CDS mph and uph
# mph: deltas.random.v.oth
# uph: deltas.random.v.oth.utts
deltas.random.v.oth.input <- deltas.random.v.oth %>%
full_join(select(deltas.random.v.oth.utts, aclew_child_id,
delta, d_xds_uph, d_tds_uph, d_cds_uph),
by = c("aclew_child_id", "delta"))
# TDS MPH: Delta TDS mph between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(m = mean(d_tds_mph)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(se = sem(d_tds_mph)) %>%
select(se))[[1]]
)
delta.tds.mph.plot <- ggplot(
data = deltas.random.v.oth.input, aes(x = delta, y = d_tds_mph)) +
geom_violin(data = deltas.random.v.oth.input, aes(x = delta, y = d_tds_mph)) +
geom_jitter(data = deltas.random.v.oth.input, aes(x = delta, y = d_tds_mph),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"TCDS (min/hr)"))) +
ylim(c(-30,20)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# XDS MPH: Delta XDS mph between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(m = mean(d_xds_mph)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(se = sem(d_xds_mph)) %>%
select(se))[[1]]
)
delta.xds.mph.plot <- ggplot(
data = deltas.random.v.oth.input, aes(x = delta, y = d_xds_mph)) +
geom_violin(data = deltas.random.v.oth.input, aes(x = delta, y = d_xds_mph)) +
geom_jitter(data = deltas.random.v.oth.input, aes(x = delta, y = d_xds_mph),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"XDS (min/hr)"))) +
ylim(c(-30,20)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# TDS UPH: Delta TDS uph between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(m = mean(d_tds_uph)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(se = sem(d_tds_uph)) %>%
select(se))[[1]]
)
delta.tds.uph.plot <- ggplot(
data = deltas.random.v.oth.input, aes(x = delta, y = d_tds_uph)) +
geom_violin(data = deltas.random.v.oth.input, aes(x = delta, y = d_tds_uph)) +
geom_jitter(data = deltas.random.v.oth.input, aes(x = delta, y = d_tds_uph),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"TCDS (utt/hr)"))) +
ylim(c(-700,1000)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# XDS UPH: Delta XDS uph between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(m = mean(d_xds_uph)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.input %>%
group_by(delta) %>%
summarise(se = sem(d_xds_uph)) %>%
select(se))[[1]]
)
delta.xds.uph.plot <- ggplot(
data = deltas.random.v.oth.input, aes(x = delta, y = d_xds_uph)) +
geom_violin(data = deltas.random.v.oth.input, aes(x = delta, y = d_xds_uph)) +
geom_jitter(data = deltas.random.v.oth.input, aes(x = delta, y = d_xds_uph),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"XDS (utt/hr)"))) +
ylim(c(-700,1000)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
grid.arrange(delta.tds.mph.plot,delta.xds.mph.plot,
delta.tds.uph.plot,delta.xds.uph.plot, nrow=2, ncol=2)
# CHI VOC: Delta voc mph between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.cvc %>%
group_by(delta) %>%
summarise(m = mean(d_cvc_mph)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.cvc %>%
group_by(delta) %>%
summarise(se = sem(d_cvc_mph)) %>%
select(se))[[1]]
)
delta.cvc.mph.plot <- ggplot(
data = deltas.random.v.oth.cvc, aes(x = delta, y = d_cvc_mph)) +
geom_violin(data = deltas.random.v.oth.cvc, aes(x = delta, y = d_cvc_mph)) +
geom_jitter(data = deltas.random.v.oth.cvc, aes(x = delta, y = d_cvc_mph),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"CHI voc (min/hr)"))) +
ylim(c(-10,20)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# CHI VOC: Delta voc uph between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.cvc %>%
group_by(delta) %>%
summarise(m = mean(d_cvc_uph)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.cvc %>%
group_by(delta) %>%
summarise(se = sem(d_cvc_uph)) %>%
select(se))[[1]]
)
delta.cvc.uph.plot <- ggplot(
data = deltas.random.v.oth.cvc, aes(x = delta, y = d_cvc_uph)) +
geom_violin(data = deltas.random.v.oth.cvc, aes(x = delta, y = d_cvc_uph)) +
geom_jitter(data = deltas.random.v.oth.cvc, aes(x = delta, y = d_cvc_uph),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"CHI voc (utt/hr)"))) +
ylim(c(-100,2000)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# CHI VOCMAT: Delta voc mat rating between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.vrt %>%
group_by(delta) %>%
summarise(m = mean(d_voc_rtg)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.vrt %>%
group_by(delta) %>%
summarise(se = sem(d_voc_rtg)) %>%
select(se))[[1]]
)
delta.voc.rtg.plot <- ggplot(
data = deltas.random.v.oth.vrt, aes(x = delta, y = d_voc_rtg)) +
geom_violin(data = deltas.random.v.oth.vrt, aes(x = delta, y = d_voc_rtg)) +
geom_jitter(data = deltas.random.v.oth.vrt, aes(x = delta, y = d_voc_rtg),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"CHI voc mat (1-4)"))) +
ylim(c(-.2,0.6)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# TDS/CDS ttph: Delta O->C transitions between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.tth %>%
group_by(delta) %>%
summarise(m = mean(d_o_c.tth.tds)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.tth %>%
group_by(delta) %>%
summarise(se = sem(d_o_c.tth.tds)) %>%
select(se))[[1]]
)
delta.tds.tth.o_c.plot <- ggplot(
data = deltas.random.v.oth.tth, aes(x = delta, y = d_o_c.tth.tds)) +
geom_violin(data = deltas.random.v.oth.tth, aes(x = delta, y = d_o_c.tth.tds)) +
geom_jitter(data = deltas.random.v.oth.tth, aes(x = delta, y = d_o_c.tth.tds),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"OTH-TCHI (tt/hr)"))) +
ylim(c(-100,600)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
# TDS/CDS ttph: Delta C->O transitions between samples
mse.info <- tibble(
delta = c("tt-random", "va-random"),
means = c(deltas.random.v.oth.tth %>%
group_by(delta) %>%
summarise(m = mean(d_c_o.tth.tds)) %>%
select(m))[[1]],
se = c(deltas.random.v.oth.tth %>%
group_by(delta) %>%
summarise(se = sem(d_c_o.tth.tds)) %>%
select(se))[[1]]
)
delta.tds.tth.c_o.plot <- ggplot(
data = deltas.random.v.oth.tth, aes(x = delta, y = d_c_o.tth.tds)) +
geom_violin(data = deltas.random.v.oth.tth, aes(x = delta, y = d_c_o.tth.tds)) +
geom_jitter(data = deltas.random.v.oth.tth, aes(x = delta, y = d_c_o.tth.tds),
shape = 1, width = .1, size = 1) +
geom_errorbar(data = mse.info,
aes(y = means, ymax = means + (1.96 * se), ymin = means + (-1.96 * se)),
width = 0.25) +
geom_point(data = mse.info, aes(y = means), size = 2) +
geom_hline(yintercept = 0, lty = "dashed") +
ylab(expression(paste(Delta,"TCHI-OTH (tt/hr)"))) +
ylim(c(-100,600)) +
xlab("Samples compared") +
scale_x_discrete(labels = c('TT - R','VA - R')) +
theme_apa() +
theme(axis.title.x = element_text(size=9),
axis.title.y = element_text(size=9))
grid.arrange(delta.cvc.mph.plot,delta.voc.rtg.plot,
delta.tds.tth.o_c.plot, delta.tds.tth.c_o.plot, nrow=2, ncol=2)
View(tth.per.sample)
sort(names(tth.per.sample))
best.min.avgs <- tth.per.sample %>%
filter(sample ! = "random") %>%
best.min.avgs <- tth.per.sample %>%
filter(sample != "random") %>%
select(-d_c_o.tth.cds, -d_c_o.tth.tds, -d_o_c.tth.cds, -d_o_c.tth.tds)
View(best.min.avgs)
unlink('Tseltal-CLE_cache', recursive = TRUE)
unlink('Tseltal-CLE_cache', recursive = TRUE)
